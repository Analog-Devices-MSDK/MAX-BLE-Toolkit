Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> program statement
Rule 2     program -> statement
Rule 3     statement -> command NEWLINE
Rule 4     statement -> DEV command NEWLINE
Rule 5     statement -> NEWLINE
Rule 6     statement -> error NEWLINE
Rule 7     command -> FOR ID ASSIGN expr TO expr optstep optlvlinc
Rule 8     command -> FOR ID ASSIGN error TO expr optstep optlvlinc
Rule 9     command -> FOR ID ASSIGN expr TO error optstep optlvlinc
Rule 10    command -> FOR ID ASSIGN expr TO expr STEP error
Rule 11    command -> IF boolexpr optlvlinc
Rule 12    command -> IF expr optlvlinc
Rule 13    command -> IF error optlvlinc
Rule 14    command -> optlvldec ELSE IF boolexpr optlvlinc
Rule 15    command -> optlvldec ELSE IF error optlvlinc
Rule 16    command -> optlvldec ELSE optlvlinc
Rule 17    command -> WHILE boolexpr optlvlinc
Rule 18    command -> WHILE bool optlvlinc
Rule 19    command -> WHILE error optlvlinc
Rule 20    command -> ADD_DEV ID expr
Rule 21    command -> ADD_DEV ID error
Rule 22    command -> CMD
Rule 23    command -> CMD RETASSIGN ID
Rule 24    command -> CMD paramlist
Rule 25    command -> CMD paramlist RETASSIGN ID
Rule 26    command -> CMD error
Rule 27    command -> WAIT expr
Rule 28    command -> WAIT error
Rule 29    command -> ID ASSIGN expr
Rule 30    command -> ID ASSIGN error
Rule 31    command -> STEPIN
Rule 32    command -> STEPOUT
Rule 33    command -> PRINT expr
Rule 34    optstep -> STEP expr
Rule 35    optstep -> empty
Rule 36    optlvlinc -> STEPIN
Rule 37    optlvlinc -> empty
Rule 38    optlvldec -> STEPOUT
Rule 39    optlvldec -> empty
Rule 40    boolexpr -> relexpr
Rule 41    boolexpr -> boolexpr AND boolexpr
Rule 42    boolexpr -> boolexpr OR boolexpr
Rule 43    boolexpr -> NOT boolexpr
Rule 44    relexpr -> expr LT expr
Rule 45    relexpr -> expr LTE expr
Rule 46    relexpr -> expr GT expr
Rule 47    relexpr -> expr GTE expr
Rule 48    relexpr -> expr EQUAL expr
Rule 49    relexpr -> expr NOTEQUAL expr
Rule 50    expr -> expr PLUS expr
Rule 51    expr -> expr MINUS expr
Rule 52    expr -> expr MUL expr
Rule 53    expr -> expr DIV expr
Rule 54    expr -> expr MOD expr
Rule 55    expr -> expr POWER expr
Rule 56    expr -> expr BITWISEAND expr
Rule 57    expr -> expr BITWISEOR expr
Rule 58    expr -> expr BITWISEXOR expr
Rule 59    expr -> expr BITWISELS INT
Rule 60    expr -> expr BITWISERS INT
Rule 61    expr -> BITWISENOT expr
Rule 62    expr -> INT
Rule 63    expr -> FLOAT
Rule 64    expr -> STR
Rule 65    expr -> ID
Rule 66    expr -> bool
Rule 67    expr -> LPAREN expr RPAREN
Rule 68    expr -> MINUS expr
Rule 69    bool -> TRUE
Rule 70    bool -> FALSE
Rule 71    paramlist -> paramlist SEP param
Rule 72    paramlist -> param
Rule 73    param -> expr
Rule 74    param -> boolexpr
Rule 75    empty -> <empty>

Terminals, with rules where they appear

ADD_DEV              : 20 21
AND                  : 41
ASSIGN               : 7 8 9 10 29 30
BITWISEAND           : 56
BITWISELS            : 59
BITWISENOT           : 61
BITWISEOR            : 57
BITWISERS            : 60
BITWISEXOR           : 58
CMD                  : 22 23 24 25 26
DEV                  : 4
DIV                  : 53
ELSE                 : 14 15 16
EQUAL                : 48
FALSE                : 70
FLOAT                : 63
FOR                  : 7 8 9 10
GT                   : 46
GTE                  : 47
ID                   : 7 8 9 10 20 21 23 25 29 30 65
IF                   : 11 12 13 14 15
INT                  : 59 60 62
LPAREN               : 67
LT                   : 44
LTE                  : 45
MINUS                : 51 68
MOD                  : 54
MUL                  : 52
NEWLINE              : 3 4 5 6
NOT                  : 43
NOTEQUAL             : 49
OR                   : 42
PLUS                 : 50
POWER                : 55
PRINT                : 33
RETASSIGN            : 23 25
RPAREN               : 67
SEP                  : 71
STEP                 : 10 34
STEPIN               : 31 36
STEPOUT              : 32 38
STR                  : 64
TO                   : 7 8 9 10
TRUE                 : 69
WAIT                 : 27 28
WHILE                : 17 18 19
error                : 6 8 9 10 13 15 19 21 26 28 30

Nonterminals, with rules where they appear

bool                 : 18 66
boolexpr             : 11 14 17 41 41 42 42 43 74
command              : 3 4
empty                : 35 37 39
expr                 : 7 7 8 9 10 10 12 20 27 29 33 34 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 60 61 67 68 73
optlvldec            : 14 15 16
optlvlinc            : 7 8 9 11 12 13 14 15 16 17 18 19
optstep              : 7 8 9
param                : 71 72
paramlist            : 24 25 71
program              : 1 0
relexpr              : 40
statement            : 1 2

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program statement
    (2) program -> . statement
    (3) statement -> . command NEWLINE
    (4) statement -> . DEV command NEWLINE
    (5) statement -> . NEWLINE
    (6) statement -> . error NEWLINE
    (7) command -> . FOR ID ASSIGN expr TO expr optstep optlvlinc
    (8) command -> . FOR ID ASSIGN error TO expr optstep optlvlinc
    (9) command -> . FOR ID ASSIGN expr TO error optstep optlvlinc
    (10) command -> . FOR ID ASSIGN expr TO expr STEP error
    (11) command -> . IF boolexpr optlvlinc
    (12) command -> . IF expr optlvlinc
    (13) command -> . IF error optlvlinc
    (14) command -> . optlvldec ELSE IF boolexpr optlvlinc
    (15) command -> . optlvldec ELSE IF error optlvlinc
    (16) command -> . optlvldec ELSE optlvlinc
    (17) command -> . WHILE boolexpr optlvlinc
    (18) command -> . WHILE bool optlvlinc
    (19) command -> . WHILE error optlvlinc
    (20) command -> . ADD_DEV ID expr
    (21) command -> . ADD_DEV ID error
    (22) command -> . CMD
    (23) command -> . CMD RETASSIGN ID
    (24) command -> . CMD paramlist
    (25) command -> . CMD paramlist RETASSIGN ID
    (26) command -> . CMD error
    (27) command -> . WAIT expr
    (28) command -> . WAIT error
    (29) command -> . ID ASSIGN expr
    (30) command -> . ID ASSIGN error
    (31) command -> . STEPIN
    (32) command -> . STEPOUT
    (33) command -> . PRINT expr
    (38) optlvldec -> . STEPOUT
    (39) optlvldec -> . empty
    (75) empty -> .

    DEV             shift and go to state 5
    NEWLINE         shift and go to state 4
    error           shift and go to state 6
    FOR             shift and go to state 7
    IF              shift and go to state 9
    WHILE           shift and go to state 11
    ADD_DEV         shift and go to state 12
    CMD             shift and go to state 13
    WAIT            shift and go to state 14
    ID              shift and go to state 8
    STEPIN          shift and go to state 15
    STEPOUT         shift and go to state 16
    PRINT           shift and go to state 17
    ELSE            reduce using rule 75 (empty -> .)

    program                        shift and go to state 1
    statement                      shift and go to state 2
    command                        shift and go to state 3
    optlvldec                      shift and go to state 10
    empty                          shift and go to state 18

state 1

    (0) S' -> program .
    (1) program -> program . statement
    (3) statement -> . command NEWLINE
    (4) statement -> . DEV command NEWLINE
    (5) statement -> . NEWLINE
    (6) statement -> . error NEWLINE
    (7) command -> . FOR ID ASSIGN expr TO expr optstep optlvlinc
    (8) command -> . FOR ID ASSIGN error TO expr optstep optlvlinc
    (9) command -> . FOR ID ASSIGN expr TO error optstep optlvlinc
    (10) command -> . FOR ID ASSIGN expr TO expr STEP error
    (11) command -> . IF boolexpr optlvlinc
    (12) command -> . IF expr optlvlinc
    (13) command -> . IF error optlvlinc
    (14) command -> . optlvldec ELSE IF boolexpr optlvlinc
    (15) command -> . optlvldec ELSE IF error optlvlinc
    (16) command -> . optlvldec ELSE optlvlinc
    (17) command -> . WHILE boolexpr optlvlinc
    (18) command -> . WHILE bool optlvlinc
    (19) command -> . WHILE error optlvlinc
    (20) command -> . ADD_DEV ID expr
    (21) command -> . ADD_DEV ID error
    (22) command -> . CMD
    (23) command -> . CMD RETASSIGN ID
    (24) command -> . CMD paramlist
    (25) command -> . CMD paramlist RETASSIGN ID
    (26) command -> . CMD error
    (27) command -> . WAIT expr
    (28) command -> . WAIT error
    (29) command -> . ID ASSIGN expr
    (30) command -> . ID ASSIGN error
    (31) command -> . STEPIN
    (32) command -> . STEPOUT
    (33) command -> . PRINT expr
    (38) optlvldec -> . STEPOUT
    (39) optlvldec -> . empty
    (75) empty -> .

    DEV             shift and go to state 5
    NEWLINE         shift and go to state 4
    error           shift and go to state 6
    FOR             shift and go to state 7
    IF              shift and go to state 9
    WHILE           shift and go to state 11
    ADD_DEV         shift and go to state 12
    CMD             shift and go to state 13
    WAIT            shift and go to state 14
    ID              shift and go to state 8
    STEPIN          shift and go to state 15
    STEPOUT         shift and go to state 16
    PRINT           shift and go to state 17
    ELSE            reduce using rule 75 (empty -> .)

    statement                      shift and go to state 19
    command                        shift and go to state 3
    optlvldec                      shift and go to state 10
    empty                          shift and go to state 18

state 2

    (2) program -> statement .

    DEV             reduce using rule 2 (program -> statement .)
    NEWLINE         reduce using rule 2 (program -> statement .)
    error           reduce using rule 2 (program -> statement .)
    FOR             reduce using rule 2 (program -> statement .)
    IF              reduce using rule 2 (program -> statement .)
    WHILE           reduce using rule 2 (program -> statement .)
    ADD_DEV         reduce using rule 2 (program -> statement .)
    CMD             reduce using rule 2 (program -> statement .)
    WAIT            reduce using rule 2 (program -> statement .)
    ID              reduce using rule 2 (program -> statement .)
    STEPIN          reduce using rule 2 (program -> statement .)
    STEPOUT         reduce using rule 2 (program -> statement .)
    PRINT           reduce using rule 2 (program -> statement .)
    $end            reduce using rule 2 (program -> statement .)
    ELSE            reduce using rule 2 (program -> statement .)


state 3

    (3) statement -> command . NEWLINE

    NEWLINE         shift and go to state 20


state 4

    (5) statement -> NEWLINE .

    DEV             reduce using rule 5 (statement -> NEWLINE .)
    NEWLINE         reduce using rule 5 (statement -> NEWLINE .)
    error           reduce using rule 5 (statement -> NEWLINE .)
    FOR             reduce using rule 5 (statement -> NEWLINE .)
    IF              reduce using rule 5 (statement -> NEWLINE .)
    WHILE           reduce using rule 5 (statement -> NEWLINE .)
    ADD_DEV         reduce using rule 5 (statement -> NEWLINE .)
    CMD             reduce using rule 5 (statement -> NEWLINE .)
    WAIT            reduce using rule 5 (statement -> NEWLINE .)
    ID              reduce using rule 5 (statement -> NEWLINE .)
    STEPIN          reduce using rule 5 (statement -> NEWLINE .)
    STEPOUT         reduce using rule 5 (statement -> NEWLINE .)
    PRINT           reduce using rule 5 (statement -> NEWLINE .)
    $end            reduce using rule 5 (statement -> NEWLINE .)
    ELSE            reduce using rule 5 (statement -> NEWLINE .)


state 5

    (4) statement -> DEV . command NEWLINE
    (7) command -> . FOR ID ASSIGN expr TO expr optstep optlvlinc
    (8) command -> . FOR ID ASSIGN error TO expr optstep optlvlinc
    (9) command -> . FOR ID ASSIGN expr TO error optstep optlvlinc
    (10) command -> . FOR ID ASSIGN expr TO expr STEP error
    (11) command -> . IF boolexpr optlvlinc
    (12) command -> . IF expr optlvlinc
    (13) command -> . IF error optlvlinc
    (14) command -> . optlvldec ELSE IF boolexpr optlvlinc
    (15) command -> . optlvldec ELSE IF error optlvlinc
    (16) command -> . optlvldec ELSE optlvlinc
    (17) command -> . WHILE boolexpr optlvlinc
    (18) command -> . WHILE bool optlvlinc
    (19) command -> . WHILE error optlvlinc
    (20) command -> . ADD_DEV ID expr
    (21) command -> . ADD_DEV ID error
    (22) command -> . CMD
    (23) command -> . CMD RETASSIGN ID
    (24) command -> . CMD paramlist
    (25) command -> . CMD paramlist RETASSIGN ID
    (26) command -> . CMD error
    (27) command -> . WAIT expr
    (28) command -> . WAIT error
    (29) command -> . ID ASSIGN expr
    (30) command -> . ID ASSIGN error
    (31) command -> . STEPIN
    (32) command -> . STEPOUT
    (33) command -> . PRINT expr
    (38) optlvldec -> . STEPOUT
    (39) optlvldec -> . empty
    (75) empty -> .

    FOR             shift and go to state 7
    IF              shift and go to state 9
    WHILE           shift and go to state 11
    ADD_DEV         shift and go to state 12
    CMD             shift and go to state 13
    WAIT            shift and go to state 14
    ID              shift and go to state 8
    STEPIN          shift and go to state 15
    STEPOUT         shift and go to state 16
    PRINT           shift and go to state 17
    ELSE            reduce using rule 75 (empty -> .)

    command                        shift and go to state 21
    optlvldec                      shift and go to state 10
    empty                          shift and go to state 18

state 6

    (6) statement -> error . NEWLINE

    NEWLINE         shift and go to state 22


state 7

    (7) command -> FOR . ID ASSIGN expr TO expr optstep optlvlinc
    (8) command -> FOR . ID ASSIGN error TO expr optstep optlvlinc
    (9) command -> FOR . ID ASSIGN expr TO error optstep optlvlinc
    (10) command -> FOR . ID ASSIGN expr TO expr STEP error

    ID              shift and go to state 23


state 8

    (29) command -> ID . ASSIGN expr
    (30) command -> ID . ASSIGN error

    ASSIGN          shift and go to state 24


state 9

    (11) command -> IF . boolexpr optlvlinc
    (12) command -> IF . expr optlvlinc
    (13) command -> IF . error optlvlinc
    (40) boolexpr -> . relexpr
    (41) boolexpr -> . boolexpr AND boolexpr
    (42) boolexpr -> . boolexpr OR boolexpr
    (43) boolexpr -> . NOT boolexpr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr MUL expr
    (53) expr -> . expr DIV expr
    (54) expr -> . expr MOD expr
    (55) expr -> . expr POWER expr
    (56) expr -> . expr BITWISEAND expr
    (57) expr -> . expr BITWISEOR expr
    (58) expr -> . expr BITWISEXOR expr
    (59) expr -> . expr BITWISELS INT
    (60) expr -> . expr BITWISERS INT
    (61) expr -> . BITWISENOT expr
    (62) expr -> . INT
    (63) expr -> . FLOAT
    (64) expr -> . STR
    (65) expr -> . ID
    (66) expr -> . bool
    (67) expr -> . LPAREN expr RPAREN
    (68) expr -> . MINUS expr
    (44) relexpr -> . expr LT expr
    (45) relexpr -> . expr LTE expr
    (46) relexpr -> . expr GT expr
    (47) relexpr -> . expr GTE expr
    (48) relexpr -> . expr EQUAL expr
    (49) relexpr -> . expr NOTEQUAL expr
    (69) bool -> . TRUE
    (70) bool -> . FALSE

    error           shift and go to state 27
    NOT             shift and go to state 29
    BITWISENOT      shift and go to state 32
    INT             shift and go to state 31
    FLOAT           shift and go to state 33
    STR             shift and go to state 34
    ID              shift and go to state 35
    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    boolexpr                       shift and go to state 25
    expr                           shift and go to state 26
    relexpr                        shift and go to state 28
    bool                           shift and go to state 36

state 10

    (14) command -> optlvldec . ELSE IF boolexpr optlvlinc
    (15) command -> optlvldec . ELSE IF error optlvlinc
    (16) command -> optlvldec . ELSE optlvlinc

    ELSE            shift and go to state 40


state 11

    (17) command -> WHILE . boolexpr optlvlinc
    (18) command -> WHILE . bool optlvlinc
    (19) command -> WHILE . error optlvlinc
    (40) boolexpr -> . relexpr
    (41) boolexpr -> . boolexpr AND boolexpr
    (42) boolexpr -> . boolexpr OR boolexpr
    (43) boolexpr -> . NOT boolexpr
    (69) bool -> . TRUE
    (70) bool -> . FALSE
    (44) relexpr -> . expr LT expr
    (45) relexpr -> . expr LTE expr
    (46) relexpr -> . expr GT expr
    (47) relexpr -> . expr GTE expr
    (48) relexpr -> . expr EQUAL expr
    (49) relexpr -> . expr NOTEQUAL expr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr MUL expr
    (53) expr -> . expr DIV expr
    (54) expr -> . expr MOD expr
    (55) expr -> . expr POWER expr
    (56) expr -> . expr BITWISEAND expr
    (57) expr -> . expr BITWISEOR expr
    (58) expr -> . expr BITWISEXOR expr
    (59) expr -> . expr BITWISELS INT
    (60) expr -> . expr BITWISERS INT
    (61) expr -> . BITWISENOT expr
    (62) expr -> . INT
    (63) expr -> . FLOAT
    (64) expr -> . STR
    (65) expr -> . ID
    (66) expr -> . bool
    (67) expr -> . LPAREN expr RPAREN
    (68) expr -> . MINUS expr

    error           shift and go to state 43
    NOT             shift and go to state 29
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    BITWISENOT      shift and go to state 32
    INT             shift and go to state 31
    FLOAT           shift and go to state 33
    STR             shift and go to state 34
    ID              shift and go to state 35
    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30

    boolexpr                       shift and go to state 41
    bool                           shift and go to state 42
    relexpr                        shift and go to state 28
    expr                           shift and go to state 44

state 12

    (20) command -> ADD_DEV . ID expr
    (21) command -> ADD_DEV . ID error

    ID              shift and go to state 45


state 13

    (22) command -> CMD .
    (23) command -> CMD . RETASSIGN ID
    (24) command -> CMD . paramlist
    (25) command -> CMD . paramlist RETASSIGN ID
    (26) command -> CMD . error
    (71) paramlist -> . paramlist SEP param
    (72) paramlist -> . param
    (73) param -> . expr
    (74) param -> . boolexpr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr MUL expr
    (53) expr -> . expr DIV expr
    (54) expr -> . expr MOD expr
    (55) expr -> . expr POWER expr
    (56) expr -> . expr BITWISEAND expr
    (57) expr -> . expr BITWISEOR expr
    (58) expr -> . expr BITWISEXOR expr
    (59) expr -> . expr BITWISELS INT
    (60) expr -> . expr BITWISERS INT
    (61) expr -> . BITWISENOT expr
    (62) expr -> . INT
    (63) expr -> . FLOAT
    (64) expr -> . STR
    (65) expr -> . ID
    (66) expr -> . bool
    (67) expr -> . LPAREN expr RPAREN
    (68) expr -> . MINUS expr
    (40) boolexpr -> . relexpr
    (41) boolexpr -> . boolexpr AND boolexpr
    (42) boolexpr -> . boolexpr OR boolexpr
    (43) boolexpr -> . NOT boolexpr
    (69) bool -> . TRUE
    (70) bool -> . FALSE
    (44) relexpr -> . expr LT expr
    (45) relexpr -> . expr LTE expr
    (46) relexpr -> . expr GT expr
    (47) relexpr -> . expr GTE expr
    (48) relexpr -> . expr EQUAL expr
    (49) relexpr -> . expr NOTEQUAL expr

    NEWLINE         reduce using rule 22 (command -> CMD .)
    RETASSIGN       shift and go to state 46
    error           shift and go to state 48
    BITWISENOT      shift and go to state 32
    INT             shift and go to state 31
    FLOAT           shift and go to state 33
    STR             shift and go to state 34
    ID              shift and go to state 35
    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    NOT             shift and go to state 29
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    paramlist                      shift and go to state 47
    param                          shift and go to state 49
    expr                           shift and go to state 50
    boolexpr                       shift and go to state 51
    bool                           shift and go to state 36
    relexpr                        shift and go to state 28

state 14

    (27) command -> WAIT . expr
    (28) command -> WAIT . error
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr MUL expr
    (53) expr -> . expr DIV expr
    (54) expr -> . expr MOD expr
    (55) expr -> . expr POWER expr
    (56) expr -> . expr BITWISEAND expr
    (57) expr -> . expr BITWISEOR expr
    (58) expr -> . expr BITWISEXOR expr
    (59) expr -> . expr BITWISELS INT
    (60) expr -> . expr BITWISERS INT
    (61) expr -> . BITWISENOT expr
    (62) expr -> . INT
    (63) expr -> . FLOAT
    (64) expr -> . STR
    (65) expr -> . ID
    (66) expr -> . bool
    (67) expr -> . LPAREN expr RPAREN
    (68) expr -> . MINUS expr
    (69) bool -> . TRUE
    (70) bool -> . FALSE

    error           shift and go to state 53
    BITWISENOT      shift and go to state 32
    INT             shift and go to state 31
    FLOAT           shift and go to state 33
    STR             shift and go to state 34
    ID              shift and go to state 35
    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expr                           shift and go to state 52
    bool                           shift and go to state 36

state 15

    (31) command -> STEPIN .

    NEWLINE         reduce using rule 31 (command -> STEPIN .)


state 16

    (32) command -> STEPOUT .
    (38) optlvldec -> STEPOUT .

    NEWLINE         reduce using rule 32 (command -> STEPOUT .)
    ELSE            reduce using rule 38 (optlvldec -> STEPOUT .)


state 17

    (33) command -> PRINT . expr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr MUL expr
    (53) expr -> . expr DIV expr
    (54) expr -> . expr MOD expr
    (55) expr -> . expr POWER expr
    (56) expr -> . expr BITWISEAND expr
    (57) expr -> . expr BITWISEOR expr
    (58) expr -> . expr BITWISEXOR expr
    (59) expr -> . expr BITWISELS INT
    (60) expr -> . expr BITWISERS INT
    (61) expr -> . BITWISENOT expr
    (62) expr -> . INT
    (63) expr -> . FLOAT
    (64) expr -> . STR
    (65) expr -> . ID
    (66) expr -> . bool
    (67) expr -> . LPAREN expr RPAREN
    (68) expr -> . MINUS expr
    (69) bool -> . TRUE
    (70) bool -> . FALSE

    BITWISENOT      shift and go to state 32
    INT             shift and go to state 31
    FLOAT           shift and go to state 33
    STR             shift and go to state 34
    ID              shift and go to state 35
    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expr                           shift and go to state 54
    bool                           shift and go to state 36

state 18

    (39) optlvldec -> empty .

    ELSE            reduce using rule 39 (optlvldec -> empty .)


state 19

    (1) program -> program statement .

    DEV             reduce using rule 1 (program -> program statement .)
    NEWLINE         reduce using rule 1 (program -> program statement .)
    error           reduce using rule 1 (program -> program statement .)
    FOR             reduce using rule 1 (program -> program statement .)
    IF              reduce using rule 1 (program -> program statement .)
    WHILE           reduce using rule 1 (program -> program statement .)
    ADD_DEV         reduce using rule 1 (program -> program statement .)
    CMD             reduce using rule 1 (program -> program statement .)
    WAIT            reduce using rule 1 (program -> program statement .)
    ID              reduce using rule 1 (program -> program statement .)
    STEPIN          reduce using rule 1 (program -> program statement .)
    STEPOUT         reduce using rule 1 (program -> program statement .)
    PRINT           reduce using rule 1 (program -> program statement .)
    $end            reduce using rule 1 (program -> program statement .)
    ELSE            reduce using rule 1 (program -> program statement .)


state 20

    (3) statement -> command NEWLINE .

    DEV             reduce using rule 3 (statement -> command NEWLINE .)
    NEWLINE         reduce using rule 3 (statement -> command NEWLINE .)
    error           reduce using rule 3 (statement -> command NEWLINE .)
    FOR             reduce using rule 3 (statement -> command NEWLINE .)
    IF              reduce using rule 3 (statement -> command NEWLINE .)
    WHILE           reduce using rule 3 (statement -> command NEWLINE .)
    ADD_DEV         reduce using rule 3 (statement -> command NEWLINE .)
    CMD             reduce using rule 3 (statement -> command NEWLINE .)
    WAIT            reduce using rule 3 (statement -> command NEWLINE .)
    ID              reduce using rule 3 (statement -> command NEWLINE .)
    STEPIN          reduce using rule 3 (statement -> command NEWLINE .)
    STEPOUT         reduce using rule 3 (statement -> command NEWLINE .)
    PRINT           reduce using rule 3 (statement -> command NEWLINE .)
    $end            reduce using rule 3 (statement -> command NEWLINE .)
    ELSE            reduce using rule 3 (statement -> command NEWLINE .)


state 21

    (4) statement -> DEV command . NEWLINE

    NEWLINE         shift and go to state 55


state 22

    (6) statement -> error NEWLINE .

    DEV             reduce using rule 6 (statement -> error NEWLINE .)
    NEWLINE         reduce using rule 6 (statement -> error NEWLINE .)
    error           reduce using rule 6 (statement -> error NEWLINE .)
    FOR             reduce using rule 6 (statement -> error NEWLINE .)
    IF              reduce using rule 6 (statement -> error NEWLINE .)
    WHILE           reduce using rule 6 (statement -> error NEWLINE .)
    ADD_DEV         reduce using rule 6 (statement -> error NEWLINE .)
    CMD             reduce using rule 6 (statement -> error NEWLINE .)
    WAIT            reduce using rule 6 (statement -> error NEWLINE .)
    ID              reduce using rule 6 (statement -> error NEWLINE .)
    STEPIN          reduce using rule 6 (statement -> error NEWLINE .)
    STEPOUT         reduce using rule 6 (statement -> error NEWLINE .)
    PRINT           reduce using rule 6 (statement -> error NEWLINE .)
    $end            reduce using rule 6 (statement -> error NEWLINE .)
    ELSE            reduce using rule 6 (statement -> error NEWLINE .)


state 23

    (7) command -> FOR ID . ASSIGN expr TO expr optstep optlvlinc
    (8) command -> FOR ID . ASSIGN error TO expr optstep optlvlinc
    (9) command -> FOR ID . ASSIGN expr TO error optstep optlvlinc
    (10) command -> FOR ID . ASSIGN expr TO expr STEP error

    ASSIGN          shift and go to state 56


state 24

    (29) command -> ID ASSIGN . expr
    (30) command -> ID ASSIGN . error
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr MUL expr
    (53) expr -> . expr DIV expr
    (54) expr -> . expr MOD expr
    (55) expr -> . expr POWER expr
    (56) expr -> . expr BITWISEAND expr
    (57) expr -> . expr BITWISEOR expr
    (58) expr -> . expr BITWISEXOR expr
    (59) expr -> . expr BITWISELS INT
    (60) expr -> . expr BITWISERS INT
    (61) expr -> . BITWISENOT expr
    (62) expr -> . INT
    (63) expr -> . FLOAT
    (64) expr -> . STR
    (65) expr -> . ID
    (66) expr -> . bool
    (67) expr -> . LPAREN expr RPAREN
    (68) expr -> . MINUS expr
    (69) bool -> . TRUE
    (70) bool -> . FALSE

    error           shift and go to state 58
    BITWISENOT      shift and go to state 32
    INT             shift and go to state 31
    FLOAT           shift and go to state 33
    STR             shift and go to state 34
    ID              shift and go to state 35
    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expr                           shift and go to state 57
    bool                           shift and go to state 36

state 25

    (11) command -> IF boolexpr . optlvlinc
    (41) boolexpr -> boolexpr . AND boolexpr
    (42) boolexpr -> boolexpr . OR boolexpr
    (36) optlvlinc -> . STEPIN
    (37) optlvlinc -> . empty
    (75) empty -> .

    AND             shift and go to state 60
    OR              shift and go to state 61
    STEPIN          shift and go to state 62
    NEWLINE         reduce using rule 75 (empty -> .)

    optlvlinc                      shift and go to state 59
    empty                          shift and go to state 63

state 26

    (12) command -> IF expr . optlvlinc
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . MUL expr
    (53) expr -> expr . DIV expr
    (54) expr -> expr . MOD expr
    (55) expr -> expr . POWER expr
    (56) expr -> expr . BITWISEAND expr
    (57) expr -> expr . BITWISEOR expr
    (58) expr -> expr . BITWISEXOR expr
    (59) expr -> expr . BITWISELS INT
    (60) expr -> expr . BITWISERS INT
    (44) relexpr -> expr . LT expr
    (45) relexpr -> expr . LTE expr
    (46) relexpr -> expr . GT expr
    (47) relexpr -> expr . GTE expr
    (48) relexpr -> expr . EQUAL expr
    (49) relexpr -> expr . NOTEQUAL expr
    (36) optlvlinc -> . STEPIN
    (37) optlvlinc -> . empty
    (75) empty -> .

    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    MUL             shift and go to state 67
    DIV             shift and go to state 68
    MOD             shift and go to state 69
    POWER           shift and go to state 70
    BITWISEAND      shift and go to state 71
    BITWISEOR       shift and go to state 72
    BITWISEXOR      shift and go to state 73
    BITWISELS       shift and go to state 74
    BITWISERS       shift and go to state 75
    LT              shift and go to state 76
    LTE             shift and go to state 77
    GT              shift and go to state 78
    GTE             shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    STEPIN          shift and go to state 62
    NEWLINE         reduce using rule 75 (empty -> .)

    optlvlinc                      shift and go to state 64
    empty                          shift and go to state 63

state 27

    (13) command -> IF error . optlvlinc
    (36) optlvlinc -> . STEPIN
    (37) optlvlinc -> . empty
    (75) empty -> .

    STEPIN          shift and go to state 62
    NEWLINE         reduce using rule 75 (empty -> .)

    optlvlinc                      shift and go to state 82
    empty                          shift and go to state 63

state 28

    (40) boolexpr -> relexpr .

    AND             reduce using rule 40 (boolexpr -> relexpr .)
    OR              reduce using rule 40 (boolexpr -> relexpr .)
    STEPIN          reduce using rule 40 (boolexpr -> relexpr .)
    NEWLINE         reduce using rule 40 (boolexpr -> relexpr .)
    RETASSIGN       reduce using rule 40 (boolexpr -> relexpr .)
    SEP             reduce using rule 40 (boolexpr -> relexpr .)


state 29

    (43) boolexpr -> NOT . boolexpr
    (40) boolexpr -> . relexpr
    (41) boolexpr -> . boolexpr AND boolexpr
    (42) boolexpr -> . boolexpr OR boolexpr
    (43) boolexpr -> . NOT boolexpr
    (44) relexpr -> . expr LT expr
    (45) relexpr -> . expr LTE expr
    (46) relexpr -> . expr GT expr
    (47) relexpr -> . expr GTE expr
    (48) relexpr -> . expr EQUAL expr
    (49) relexpr -> . expr NOTEQUAL expr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr MUL expr
    (53) expr -> . expr DIV expr
    (54) expr -> . expr MOD expr
    (55) expr -> . expr POWER expr
    (56) expr -> . expr BITWISEAND expr
    (57) expr -> . expr BITWISEOR expr
    (58) expr -> . expr BITWISEXOR expr
    (59) expr -> . expr BITWISELS INT
    (60) expr -> . expr BITWISERS INT
    (61) expr -> . BITWISENOT expr
    (62) expr -> . INT
    (63) expr -> . FLOAT
    (64) expr -> . STR
    (65) expr -> . ID
    (66) expr -> . bool
    (67) expr -> . LPAREN expr RPAREN
    (68) expr -> . MINUS expr
    (69) bool -> . TRUE
    (70) bool -> . FALSE

    NOT             shift and go to state 29
    BITWISENOT      shift and go to state 32
    INT             shift and go to state 31
    FLOAT           shift and go to state 33
    STR             shift and go to state 34
    ID              shift and go to state 35
    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    boolexpr                       shift and go to state 83
    relexpr                        shift and go to state 28
    expr                           shift and go to state 44
    bool                           shift and go to state 36

state 30

    (68) expr -> MINUS . expr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr MUL expr
    (53) expr -> . expr DIV expr
    (54) expr -> . expr MOD expr
    (55) expr -> . expr POWER expr
    (56) expr -> . expr BITWISEAND expr
    (57) expr -> . expr BITWISEOR expr
    (58) expr -> . expr BITWISEXOR expr
    (59) expr -> . expr BITWISELS INT
    (60) expr -> . expr BITWISERS INT
    (61) expr -> . BITWISENOT expr
    (62) expr -> . INT
    (63) expr -> . FLOAT
    (64) expr -> . STR
    (65) expr -> . ID
    (66) expr -> . bool
    (67) expr -> . LPAREN expr RPAREN
    (68) expr -> . MINUS expr
    (69) bool -> . TRUE
    (70) bool -> . FALSE

    BITWISENOT      shift and go to state 32
    INT             shift and go to state 31
    FLOAT           shift and go to state 33
    STR             shift and go to state 34
    ID              shift and go to state 35
    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expr                           shift and go to state 84
    bool                           shift and go to state 36

state 31

    (62) expr -> INT .

    PLUS            reduce using rule 62 (expr -> INT .)
    MINUS           reduce using rule 62 (expr -> INT .)
    MUL             reduce using rule 62 (expr -> INT .)
    DIV             reduce using rule 62 (expr -> INT .)
    MOD             reduce using rule 62 (expr -> INT .)
    POWER           reduce using rule 62 (expr -> INT .)
    BITWISEAND      reduce using rule 62 (expr -> INT .)
    BITWISEOR       reduce using rule 62 (expr -> INT .)
    BITWISEXOR      reduce using rule 62 (expr -> INT .)
    BITWISELS       reduce using rule 62 (expr -> INT .)
    BITWISERS       reduce using rule 62 (expr -> INT .)
    LT              reduce using rule 62 (expr -> INT .)
    LTE             reduce using rule 62 (expr -> INT .)
    GT              reduce using rule 62 (expr -> INT .)
    GTE             reduce using rule 62 (expr -> INT .)
    EQUAL           reduce using rule 62 (expr -> INT .)
    NOTEQUAL        reduce using rule 62 (expr -> INT .)
    STEPIN          reduce using rule 62 (expr -> INT .)
    NEWLINE         reduce using rule 62 (expr -> INT .)
    RETASSIGN       reduce using rule 62 (expr -> INT .)
    SEP             reduce using rule 62 (expr -> INT .)
    RPAREN          reduce using rule 62 (expr -> INT .)
    TO              reduce using rule 62 (expr -> INT .)
    AND             reduce using rule 62 (expr -> INT .)
    OR              reduce using rule 62 (expr -> INT .)
    STEP            reduce using rule 62 (expr -> INT .)


state 32

    (61) expr -> BITWISENOT . expr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr MUL expr
    (53) expr -> . expr DIV expr
    (54) expr -> . expr MOD expr
    (55) expr -> . expr POWER expr
    (56) expr -> . expr BITWISEAND expr
    (57) expr -> . expr BITWISEOR expr
    (58) expr -> . expr BITWISEXOR expr
    (59) expr -> . expr BITWISELS INT
    (60) expr -> . expr BITWISERS INT
    (61) expr -> . BITWISENOT expr
    (62) expr -> . INT
    (63) expr -> . FLOAT
    (64) expr -> . STR
    (65) expr -> . ID
    (66) expr -> . bool
    (67) expr -> . LPAREN expr RPAREN
    (68) expr -> . MINUS expr
    (69) bool -> . TRUE
    (70) bool -> . FALSE

    BITWISENOT      shift and go to state 32
    INT             shift and go to state 31
    FLOAT           shift and go to state 33
    STR             shift and go to state 34
    ID              shift and go to state 35
    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expr                           shift and go to state 85
    bool                           shift and go to state 36

state 33

    (63) expr -> FLOAT .

    PLUS            reduce using rule 63 (expr -> FLOAT .)
    MINUS           reduce using rule 63 (expr -> FLOAT .)
    MUL             reduce using rule 63 (expr -> FLOAT .)
    DIV             reduce using rule 63 (expr -> FLOAT .)
    MOD             reduce using rule 63 (expr -> FLOAT .)
    POWER           reduce using rule 63 (expr -> FLOAT .)
    BITWISEAND      reduce using rule 63 (expr -> FLOAT .)
    BITWISEOR       reduce using rule 63 (expr -> FLOAT .)
    BITWISEXOR      reduce using rule 63 (expr -> FLOAT .)
    BITWISELS       reduce using rule 63 (expr -> FLOAT .)
    BITWISERS       reduce using rule 63 (expr -> FLOAT .)
    LT              reduce using rule 63 (expr -> FLOAT .)
    LTE             reduce using rule 63 (expr -> FLOAT .)
    GT              reduce using rule 63 (expr -> FLOAT .)
    GTE             reduce using rule 63 (expr -> FLOAT .)
    EQUAL           reduce using rule 63 (expr -> FLOAT .)
    NOTEQUAL        reduce using rule 63 (expr -> FLOAT .)
    STEPIN          reduce using rule 63 (expr -> FLOAT .)
    NEWLINE         reduce using rule 63 (expr -> FLOAT .)
    RETASSIGN       reduce using rule 63 (expr -> FLOAT .)
    SEP             reduce using rule 63 (expr -> FLOAT .)
    RPAREN          reduce using rule 63 (expr -> FLOAT .)
    TO              reduce using rule 63 (expr -> FLOAT .)
    AND             reduce using rule 63 (expr -> FLOAT .)
    OR              reduce using rule 63 (expr -> FLOAT .)
    STEP            reduce using rule 63 (expr -> FLOAT .)


state 34

    (64) expr -> STR .

    PLUS            reduce using rule 64 (expr -> STR .)
    MINUS           reduce using rule 64 (expr -> STR .)
    MUL             reduce using rule 64 (expr -> STR .)
    DIV             reduce using rule 64 (expr -> STR .)
    MOD             reduce using rule 64 (expr -> STR .)
    POWER           reduce using rule 64 (expr -> STR .)
    BITWISEAND      reduce using rule 64 (expr -> STR .)
    BITWISEOR       reduce using rule 64 (expr -> STR .)
    BITWISEXOR      reduce using rule 64 (expr -> STR .)
    BITWISELS       reduce using rule 64 (expr -> STR .)
    BITWISERS       reduce using rule 64 (expr -> STR .)
    LT              reduce using rule 64 (expr -> STR .)
    LTE             reduce using rule 64 (expr -> STR .)
    GT              reduce using rule 64 (expr -> STR .)
    GTE             reduce using rule 64 (expr -> STR .)
    EQUAL           reduce using rule 64 (expr -> STR .)
    NOTEQUAL        reduce using rule 64 (expr -> STR .)
    STEPIN          reduce using rule 64 (expr -> STR .)
    NEWLINE         reduce using rule 64 (expr -> STR .)
    RETASSIGN       reduce using rule 64 (expr -> STR .)
    SEP             reduce using rule 64 (expr -> STR .)
    RPAREN          reduce using rule 64 (expr -> STR .)
    TO              reduce using rule 64 (expr -> STR .)
    AND             reduce using rule 64 (expr -> STR .)
    OR              reduce using rule 64 (expr -> STR .)
    STEP            reduce using rule 64 (expr -> STR .)


state 35

    (65) expr -> ID .

    PLUS            reduce using rule 65 (expr -> ID .)
    MINUS           reduce using rule 65 (expr -> ID .)
    MUL             reduce using rule 65 (expr -> ID .)
    DIV             reduce using rule 65 (expr -> ID .)
    MOD             reduce using rule 65 (expr -> ID .)
    POWER           reduce using rule 65 (expr -> ID .)
    BITWISEAND      reduce using rule 65 (expr -> ID .)
    BITWISEOR       reduce using rule 65 (expr -> ID .)
    BITWISEXOR      reduce using rule 65 (expr -> ID .)
    BITWISELS       reduce using rule 65 (expr -> ID .)
    BITWISERS       reduce using rule 65 (expr -> ID .)
    LT              reduce using rule 65 (expr -> ID .)
    LTE             reduce using rule 65 (expr -> ID .)
    GT              reduce using rule 65 (expr -> ID .)
    GTE             reduce using rule 65 (expr -> ID .)
    EQUAL           reduce using rule 65 (expr -> ID .)
    NOTEQUAL        reduce using rule 65 (expr -> ID .)
    STEPIN          reduce using rule 65 (expr -> ID .)
    NEWLINE         reduce using rule 65 (expr -> ID .)
    RETASSIGN       reduce using rule 65 (expr -> ID .)
    SEP             reduce using rule 65 (expr -> ID .)
    RPAREN          reduce using rule 65 (expr -> ID .)
    TO              reduce using rule 65 (expr -> ID .)
    AND             reduce using rule 65 (expr -> ID .)
    OR              reduce using rule 65 (expr -> ID .)
    STEP            reduce using rule 65 (expr -> ID .)


state 36

    (66) expr -> bool .

    PLUS            reduce using rule 66 (expr -> bool .)
    MINUS           reduce using rule 66 (expr -> bool .)
    MUL             reduce using rule 66 (expr -> bool .)
    DIV             reduce using rule 66 (expr -> bool .)
    MOD             reduce using rule 66 (expr -> bool .)
    POWER           reduce using rule 66 (expr -> bool .)
    BITWISEAND      reduce using rule 66 (expr -> bool .)
    BITWISEOR       reduce using rule 66 (expr -> bool .)
    BITWISEXOR      reduce using rule 66 (expr -> bool .)
    BITWISELS       reduce using rule 66 (expr -> bool .)
    BITWISERS       reduce using rule 66 (expr -> bool .)
    LT              reduce using rule 66 (expr -> bool .)
    LTE             reduce using rule 66 (expr -> bool .)
    GT              reduce using rule 66 (expr -> bool .)
    GTE             reduce using rule 66 (expr -> bool .)
    EQUAL           reduce using rule 66 (expr -> bool .)
    NOTEQUAL        reduce using rule 66 (expr -> bool .)
    STEPIN          reduce using rule 66 (expr -> bool .)
    NEWLINE         reduce using rule 66 (expr -> bool .)
    RETASSIGN       reduce using rule 66 (expr -> bool .)
    SEP             reduce using rule 66 (expr -> bool .)
    RPAREN          reduce using rule 66 (expr -> bool .)
    TO              reduce using rule 66 (expr -> bool .)
    AND             reduce using rule 66 (expr -> bool .)
    OR              reduce using rule 66 (expr -> bool .)
    STEP            reduce using rule 66 (expr -> bool .)


state 37

    (67) expr -> LPAREN . expr RPAREN
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr MUL expr
    (53) expr -> . expr DIV expr
    (54) expr -> . expr MOD expr
    (55) expr -> . expr POWER expr
    (56) expr -> . expr BITWISEAND expr
    (57) expr -> . expr BITWISEOR expr
    (58) expr -> . expr BITWISEXOR expr
    (59) expr -> . expr BITWISELS INT
    (60) expr -> . expr BITWISERS INT
    (61) expr -> . BITWISENOT expr
    (62) expr -> . INT
    (63) expr -> . FLOAT
    (64) expr -> . STR
    (65) expr -> . ID
    (66) expr -> . bool
    (67) expr -> . LPAREN expr RPAREN
    (68) expr -> . MINUS expr
    (69) bool -> . TRUE
    (70) bool -> . FALSE

    BITWISENOT      shift and go to state 32
    INT             shift and go to state 31
    FLOAT           shift and go to state 33
    STR             shift and go to state 34
    ID              shift and go to state 35
    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expr                           shift and go to state 86
    bool                           shift and go to state 36

state 38

    (69) bool -> TRUE .

    PLUS            reduce using rule 69 (bool -> TRUE .)
    MINUS           reduce using rule 69 (bool -> TRUE .)
    MUL             reduce using rule 69 (bool -> TRUE .)
    DIV             reduce using rule 69 (bool -> TRUE .)
    MOD             reduce using rule 69 (bool -> TRUE .)
    POWER           reduce using rule 69 (bool -> TRUE .)
    BITWISEAND      reduce using rule 69 (bool -> TRUE .)
    BITWISEOR       reduce using rule 69 (bool -> TRUE .)
    BITWISEXOR      reduce using rule 69 (bool -> TRUE .)
    BITWISELS       reduce using rule 69 (bool -> TRUE .)
    BITWISERS       reduce using rule 69 (bool -> TRUE .)
    LT              reduce using rule 69 (bool -> TRUE .)
    LTE             reduce using rule 69 (bool -> TRUE .)
    GT              reduce using rule 69 (bool -> TRUE .)
    GTE             reduce using rule 69 (bool -> TRUE .)
    EQUAL           reduce using rule 69 (bool -> TRUE .)
    NOTEQUAL        reduce using rule 69 (bool -> TRUE .)
    STEPIN          reduce using rule 69 (bool -> TRUE .)
    NEWLINE         reduce using rule 69 (bool -> TRUE .)
    RETASSIGN       reduce using rule 69 (bool -> TRUE .)
    SEP             reduce using rule 69 (bool -> TRUE .)
    RPAREN          reduce using rule 69 (bool -> TRUE .)
    TO              reduce using rule 69 (bool -> TRUE .)
    AND             reduce using rule 69 (bool -> TRUE .)
    OR              reduce using rule 69 (bool -> TRUE .)
    STEP            reduce using rule 69 (bool -> TRUE .)


state 39

    (70) bool -> FALSE .

    PLUS            reduce using rule 70 (bool -> FALSE .)
    MINUS           reduce using rule 70 (bool -> FALSE .)
    MUL             reduce using rule 70 (bool -> FALSE .)
    DIV             reduce using rule 70 (bool -> FALSE .)
    MOD             reduce using rule 70 (bool -> FALSE .)
    POWER           reduce using rule 70 (bool -> FALSE .)
    BITWISEAND      reduce using rule 70 (bool -> FALSE .)
    BITWISEOR       reduce using rule 70 (bool -> FALSE .)
    BITWISEXOR      reduce using rule 70 (bool -> FALSE .)
    BITWISELS       reduce using rule 70 (bool -> FALSE .)
    BITWISERS       reduce using rule 70 (bool -> FALSE .)
    LT              reduce using rule 70 (bool -> FALSE .)
    LTE             reduce using rule 70 (bool -> FALSE .)
    GT              reduce using rule 70 (bool -> FALSE .)
    GTE             reduce using rule 70 (bool -> FALSE .)
    EQUAL           reduce using rule 70 (bool -> FALSE .)
    NOTEQUAL        reduce using rule 70 (bool -> FALSE .)
    STEPIN          reduce using rule 70 (bool -> FALSE .)
    NEWLINE         reduce using rule 70 (bool -> FALSE .)
    RETASSIGN       reduce using rule 70 (bool -> FALSE .)
    SEP             reduce using rule 70 (bool -> FALSE .)
    RPAREN          reduce using rule 70 (bool -> FALSE .)
    TO              reduce using rule 70 (bool -> FALSE .)
    AND             reduce using rule 70 (bool -> FALSE .)
    OR              reduce using rule 70 (bool -> FALSE .)
    STEP            reduce using rule 70 (bool -> FALSE .)


state 40

    (14) command -> optlvldec ELSE . IF boolexpr optlvlinc
    (15) command -> optlvldec ELSE . IF error optlvlinc
    (16) command -> optlvldec ELSE . optlvlinc
    (36) optlvlinc -> . STEPIN
    (37) optlvlinc -> . empty
    (75) empty -> .

    IF              shift and go to state 87
    STEPIN          shift and go to state 62
    NEWLINE         reduce using rule 75 (empty -> .)

    optlvlinc                      shift and go to state 88
    empty                          shift and go to state 63

state 41

    (17) command -> WHILE boolexpr . optlvlinc
    (41) boolexpr -> boolexpr . AND boolexpr
    (42) boolexpr -> boolexpr . OR boolexpr
    (36) optlvlinc -> . STEPIN
    (37) optlvlinc -> . empty
    (75) empty -> .

    AND             shift and go to state 60
    OR              shift and go to state 61
    STEPIN          shift and go to state 62
    NEWLINE         reduce using rule 75 (empty -> .)

    optlvlinc                      shift and go to state 89
    empty                          shift and go to state 63

state 42

    (18) command -> WHILE bool . optlvlinc
    (66) expr -> bool .
    (36) optlvlinc -> . STEPIN
    (37) optlvlinc -> . empty
    (75) empty -> .

    LT              reduce using rule 66 (expr -> bool .)
    LTE             reduce using rule 66 (expr -> bool .)
    GT              reduce using rule 66 (expr -> bool .)
    GTE             reduce using rule 66 (expr -> bool .)
    EQUAL           reduce using rule 66 (expr -> bool .)
    NOTEQUAL        reduce using rule 66 (expr -> bool .)
    PLUS            reduce using rule 66 (expr -> bool .)
    MINUS           reduce using rule 66 (expr -> bool .)
    MUL             reduce using rule 66 (expr -> bool .)
    DIV             reduce using rule 66 (expr -> bool .)
    MOD             reduce using rule 66 (expr -> bool .)
    POWER           reduce using rule 66 (expr -> bool .)
    BITWISEAND      reduce using rule 66 (expr -> bool .)
    BITWISEOR       reduce using rule 66 (expr -> bool .)
    BITWISEXOR      reduce using rule 66 (expr -> bool .)
    BITWISELS       reduce using rule 66 (expr -> bool .)
    BITWISERS       reduce using rule 66 (expr -> bool .)
    STEPIN          shift and go to state 62
    NEWLINE         reduce using rule 75 (empty -> .)

    optlvlinc                      shift and go to state 90
    empty                          shift and go to state 63

state 43

    (19) command -> WHILE error . optlvlinc
    (36) optlvlinc -> . STEPIN
    (37) optlvlinc -> . empty
    (75) empty -> .

    STEPIN          shift and go to state 62
    NEWLINE         reduce using rule 75 (empty -> .)

    optlvlinc                      shift and go to state 91
    empty                          shift and go to state 63

state 44

    (44) relexpr -> expr . LT expr
    (45) relexpr -> expr . LTE expr
    (46) relexpr -> expr . GT expr
    (47) relexpr -> expr . GTE expr
    (48) relexpr -> expr . EQUAL expr
    (49) relexpr -> expr . NOTEQUAL expr
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . MUL expr
    (53) expr -> expr . DIV expr
    (54) expr -> expr . MOD expr
    (55) expr -> expr . POWER expr
    (56) expr -> expr . BITWISEAND expr
    (57) expr -> expr . BITWISEOR expr
    (58) expr -> expr . BITWISEXOR expr
    (59) expr -> expr . BITWISELS INT
    (60) expr -> expr . BITWISERS INT

    LT              shift and go to state 76
    LTE             shift and go to state 77
    GT              shift and go to state 78
    GTE             shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    MUL             shift and go to state 67
    DIV             shift and go to state 68
    MOD             shift and go to state 69
    POWER           shift and go to state 70
    BITWISEAND      shift and go to state 71
    BITWISEOR       shift and go to state 72
    BITWISEXOR      shift and go to state 73
    BITWISELS       shift and go to state 74
    BITWISERS       shift and go to state 75


state 45

    (20) command -> ADD_DEV ID . expr
    (21) command -> ADD_DEV ID . error
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr MUL expr
    (53) expr -> . expr DIV expr
    (54) expr -> . expr MOD expr
    (55) expr -> . expr POWER expr
    (56) expr -> . expr BITWISEAND expr
    (57) expr -> . expr BITWISEOR expr
    (58) expr -> . expr BITWISEXOR expr
    (59) expr -> . expr BITWISELS INT
    (60) expr -> . expr BITWISERS INT
    (61) expr -> . BITWISENOT expr
    (62) expr -> . INT
    (63) expr -> . FLOAT
    (64) expr -> . STR
    (65) expr -> . ID
    (66) expr -> . bool
    (67) expr -> . LPAREN expr RPAREN
    (68) expr -> . MINUS expr
    (69) bool -> . TRUE
    (70) bool -> . FALSE

    error           shift and go to state 93
    BITWISENOT      shift and go to state 32
    INT             shift and go to state 31
    FLOAT           shift and go to state 33
    STR             shift and go to state 34
    ID              shift and go to state 35
    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expr                           shift and go to state 92
    bool                           shift and go to state 36

state 46

    (23) command -> CMD RETASSIGN . ID

    ID              shift and go to state 94


state 47

    (24) command -> CMD paramlist .
    (25) command -> CMD paramlist . RETASSIGN ID
    (71) paramlist -> paramlist . SEP param

    NEWLINE         reduce using rule 24 (command -> CMD paramlist .)
    RETASSIGN       shift and go to state 95
    SEP             shift and go to state 96


state 48

    (26) command -> CMD error .

    NEWLINE         reduce using rule 26 (command -> CMD error .)


state 49

    (72) paramlist -> param .

    RETASSIGN       reduce using rule 72 (paramlist -> param .)
    SEP             reduce using rule 72 (paramlist -> param .)
    NEWLINE         reduce using rule 72 (paramlist -> param .)


state 50

    (73) param -> expr .
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . MUL expr
    (53) expr -> expr . DIV expr
    (54) expr -> expr . MOD expr
    (55) expr -> expr . POWER expr
    (56) expr -> expr . BITWISEAND expr
    (57) expr -> expr . BITWISEOR expr
    (58) expr -> expr . BITWISEXOR expr
    (59) expr -> expr . BITWISELS INT
    (60) expr -> expr . BITWISERS INT
    (44) relexpr -> expr . LT expr
    (45) relexpr -> expr . LTE expr
    (46) relexpr -> expr . GT expr
    (47) relexpr -> expr . GTE expr
    (48) relexpr -> expr . EQUAL expr
    (49) relexpr -> expr . NOTEQUAL expr

    RETASSIGN       reduce using rule 73 (param -> expr .)
    SEP             reduce using rule 73 (param -> expr .)
    NEWLINE         reduce using rule 73 (param -> expr .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    MUL             shift and go to state 67
    DIV             shift and go to state 68
    MOD             shift and go to state 69
    POWER           shift and go to state 70
    BITWISEAND      shift and go to state 71
    BITWISEOR       shift and go to state 72
    BITWISEXOR      shift and go to state 73
    BITWISELS       shift and go to state 74
    BITWISERS       shift and go to state 75
    LT              shift and go to state 76
    LTE             shift and go to state 77
    GT              shift and go to state 78
    GTE             shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81


state 51

    (74) param -> boolexpr .
    (41) boolexpr -> boolexpr . AND boolexpr
    (42) boolexpr -> boolexpr . OR boolexpr

    RETASSIGN       reduce using rule 74 (param -> boolexpr .)
    SEP             reduce using rule 74 (param -> boolexpr .)
    NEWLINE         reduce using rule 74 (param -> boolexpr .)
    AND             shift and go to state 60
    OR              shift and go to state 61


state 52

    (27) command -> WAIT expr .
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . MUL expr
    (53) expr -> expr . DIV expr
    (54) expr -> expr . MOD expr
    (55) expr -> expr . POWER expr
    (56) expr -> expr . BITWISEAND expr
    (57) expr -> expr . BITWISEOR expr
    (58) expr -> expr . BITWISEXOR expr
    (59) expr -> expr . BITWISELS INT
    (60) expr -> expr . BITWISERS INT

    NEWLINE         reduce using rule 27 (command -> WAIT expr .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    MUL             shift and go to state 67
    DIV             shift and go to state 68
    MOD             shift and go to state 69
    POWER           shift and go to state 70
    BITWISEAND      shift and go to state 71
    BITWISEOR       shift and go to state 72
    BITWISEXOR      shift and go to state 73
    BITWISELS       shift and go to state 74
    BITWISERS       shift and go to state 75


state 53

    (28) command -> WAIT error .

    NEWLINE         reduce using rule 28 (command -> WAIT error .)


state 54

    (33) command -> PRINT expr .
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . MUL expr
    (53) expr -> expr . DIV expr
    (54) expr -> expr . MOD expr
    (55) expr -> expr . POWER expr
    (56) expr -> expr . BITWISEAND expr
    (57) expr -> expr . BITWISEOR expr
    (58) expr -> expr . BITWISEXOR expr
    (59) expr -> expr . BITWISELS INT
    (60) expr -> expr . BITWISERS INT

    NEWLINE         reduce using rule 33 (command -> PRINT expr .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    MUL             shift and go to state 67
    DIV             shift and go to state 68
    MOD             shift and go to state 69
    POWER           shift and go to state 70
    BITWISEAND      shift and go to state 71
    BITWISEOR       shift and go to state 72
    BITWISEXOR      shift and go to state 73
    BITWISELS       shift and go to state 74
    BITWISERS       shift and go to state 75


state 55

    (4) statement -> DEV command NEWLINE .

    DEV             reduce using rule 4 (statement -> DEV command NEWLINE .)
    NEWLINE         reduce using rule 4 (statement -> DEV command NEWLINE .)
    error           reduce using rule 4 (statement -> DEV command NEWLINE .)
    FOR             reduce using rule 4 (statement -> DEV command NEWLINE .)
    IF              reduce using rule 4 (statement -> DEV command NEWLINE .)
    WHILE           reduce using rule 4 (statement -> DEV command NEWLINE .)
    ADD_DEV         reduce using rule 4 (statement -> DEV command NEWLINE .)
    CMD             reduce using rule 4 (statement -> DEV command NEWLINE .)
    WAIT            reduce using rule 4 (statement -> DEV command NEWLINE .)
    ID              reduce using rule 4 (statement -> DEV command NEWLINE .)
    STEPIN          reduce using rule 4 (statement -> DEV command NEWLINE .)
    STEPOUT         reduce using rule 4 (statement -> DEV command NEWLINE .)
    PRINT           reduce using rule 4 (statement -> DEV command NEWLINE .)
    $end            reduce using rule 4 (statement -> DEV command NEWLINE .)
    ELSE            reduce using rule 4 (statement -> DEV command NEWLINE .)


state 56

    (7) command -> FOR ID ASSIGN . expr TO expr optstep optlvlinc
    (8) command -> FOR ID ASSIGN . error TO expr optstep optlvlinc
    (9) command -> FOR ID ASSIGN . expr TO error optstep optlvlinc
    (10) command -> FOR ID ASSIGN . expr TO expr STEP error
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr MUL expr
    (53) expr -> . expr DIV expr
    (54) expr -> . expr MOD expr
    (55) expr -> . expr POWER expr
    (56) expr -> . expr BITWISEAND expr
    (57) expr -> . expr BITWISEOR expr
    (58) expr -> . expr BITWISEXOR expr
    (59) expr -> . expr BITWISELS INT
    (60) expr -> . expr BITWISERS INT
    (61) expr -> . BITWISENOT expr
    (62) expr -> . INT
    (63) expr -> . FLOAT
    (64) expr -> . STR
    (65) expr -> . ID
    (66) expr -> . bool
    (67) expr -> . LPAREN expr RPAREN
    (68) expr -> . MINUS expr
    (69) bool -> . TRUE
    (70) bool -> . FALSE

    error           shift and go to state 98
    BITWISENOT      shift and go to state 32
    INT             shift and go to state 31
    FLOAT           shift and go to state 33
    STR             shift and go to state 34
    ID              shift and go to state 35
    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expr                           shift and go to state 97
    bool                           shift and go to state 36

state 57

    (29) command -> ID ASSIGN expr .
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . MUL expr
    (53) expr -> expr . DIV expr
    (54) expr -> expr . MOD expr
    (55) expr -> expr . POWER expr
    (56) expr -> expr . BITWISEAND expr
    (57) expr -> expr . BITWISEOR expr
    (58) expr -> expr . BITWISEXOR expr
    (59) expr -> expr . BITWISELS INT
    (60) expr -> expr . BITWISERS INT

    NEWLINE         reduce using rule 29 (command -> ID ASSIGN expr .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    MUL             shift and go to state 67
    DIV             shift and go to state 68
    MOD             shift and go to state 69
    POWER           shift and go to state 70
    BITWISEAND      shift and go to state 71
    BITWISEOR       shift and go to state 72
    BITWISEXOR      shift and go to state 73
    BITWISELS       shift and go to state 74
    BITWISERS       shift and go to state 75


state 58

    (30) command -> ID ASSIGN error .

    NEWLINE         reduce using rule 30 (command -> ID ASSIGN error .)


state 59

    (11) command -> IF boolexpr optlvlinc .

    NEWLINE         reduce using rule 11 (command -> IF boolexpr optlvlinc .)


state 60

    (41) boolexpr -> boolexpr AND . boolexpr
    (40) boolexpr -> . relexpr
    (41) boolexpr -> . boolexpr AND boolexpr
    (42) boolexpr -> . boolexpr OR boolexpr
    (43) boolexpr -> . NOT boolexpr
    (44) relexpr -> . expr LT expr
    (45) relexpr -> . expr LTE expr
    (46) relexpr -> . expr GT expr
    (47) relexpr -> . expr GTE expr
    (48) relexpr -> . expr EQUAL expr
    (49) relexpr -> . expr NOTEQUAL expr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr MUL expr
    (53) expr -> . expr DIV expr
    (54) expr -> . expr MOD expr
    (55) expr -> . expr POWER expr
    (56) expr -> . expr BITWISEAND expr
    (57) expr -> . expr BITWISEOR expr
    (58) expr -> . expr BITWISEXOR expr
    (59) expr -> . expr BITWISELS INT
    (60) expr -> . expr BITWISERS INT
    (61) expr -> . BITWISENOT expr
    (62) expr -> . INT
    (63) expr -> . FLOAT
    (64) expr -> . STR
    (65) expr -> . ID
    (66) expr -> . bool
    (67) expr -> . LPAREN expr RPAREN
    (68) expr -> . MINUS expr
    (69) bool -> . TRUE
    (70) bool -> . FALSE

    NOT             shift and go to state 29
    BITWISENOT      shift and go to state 32
    INT             shift and go to state 31
    FLOAT           shift and go to state 33
    STR             shift and go to state 34
    ID              shift and go to state 35
    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    boolexpr                       shift and go to state 99
    relexpr                        shift and go to state 28
    expr                           shift and go to state 44
    bool                           shift and go to state 36

state 61

    (42) boolexpr -> boolexpr OR . boolexpr
    (40) boolexpr -> . relexpr
    (41) boolexpr -> . boolexpr AND boolexpr
    (42) boolexpr -> . boolexpr OR boolexpr
    (43) boolexpr -> . NOT boolexpr
    (44) relexpr -> . expr LT expr
    (45) relexpr -> . expr LTE expr
    (46) relexpr -> . expr GT expr
    (47) relexpr -> . expr GTE expr
    (48) relexpr -> . expr EQUAL expr
    (49) relexpr -> . expr NOTEQUAL expr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr MUL expr
    (53) expr -> . expr DIV expr
    (54) expr -> . expr MOD expr
    (55) expr -> . expr POWER expr
    (56) expr -> . expr BITWISEAND expr
    (57) expr -> . expr BITWISEOR expr
    (58) expr -> . expr BITWISEXOR expr
    (59) expr -> . expr BITWISELS INT
    (60) expr -> . expr BITWISERS INT
    (61) expr -> . BITWISENOT expr
    (62) expr -> . INT
    (63) expr -> . FLOAT
    (64) expr -> . STR
    (65) expr -> . ID
    (66) expr -> . bool
    (67) expr -> . LPAREN expr RPAREN
    (68) expr -> . MINUS expr
    (69) bool -> . TRUE
    (70) bool -> . FALSE

    NOT             shift and go to state 29
    BITWISENOT      shift and go to state 32
    INT             shift and go to state 31
    FLOAT           shift and go to state 33
    STR             shift and go to state 34
    ID              shift and go to state 35
    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    boolexpr                       shift and go to state 100
    relexpr                        shift and go to state 28
    expr                           shift and go to state 44
    bool                           shift and go to state 36

state 62

    (36) optlvlinc -> STEPIN .

    NEWLINE         reduce using rule 36 (optlvlinc -> STEPIN .)


state 63

    (37) optlvlinc -> empty .

    NEWLINE         reduce using rule 37 (optlvlinc -> empty .)


state 64

    (12) command -> IF expr optlvlinc .

    NEWLINE         reduce using rule 12 (command -> IF expr optlvlinc .)


state 65

    (50) expr -> expr PLUS . expr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr MUL expr
    (53) expr -> . expr DIV expr
    (54) expr -> . expr MOD expr
    (55) expr -> . expr POWER expr
    (56) expr -> . expr BITWISEAND expr
    (57) expr -> . expr BITWISEOR expr
    (58) expr -> . expr BITWISEXOR expr
    (59) expr -> . expr BITWISELS INT
    (60) expr -> . expr BITWISERS INT
    (61) expr -> . BITWISENOT expr
    (62) expr -> . INT
    (63) expr -> . FLOAT
    (64) expr -> . STR
    (65) expr -> . ID
    (66) expr -> . bool
    (67) expr -> . LPAREN expr RPAREN
    (68) expr -> . MINUS expr
    (69) bool -> . TRUE
    (70) bool -> . FALSE

    BITWISENOT      shift and go to state 32
    INT             shift and go to state 31
    FLOAT           shift and go to state 33
    STR             shift and go to state 34
    ID              shift and go to state 35
    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expr                           shift and go to state 101
    bool                           shift and go to state 36

state 66

    (51) expr -> expr MINUS . expr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr MUL expr
    (53) expr -> . expr DIV expr
    (54) expr -> . expr MOD expr
    (55) expr -> . expr POWER expr
    (56) expr -> . expr BITWISEAND expr
    (57) expr -> . expr BITWISEOR expr
    (58) expr -> . expr BITWISEXOR expr
    (59) expr -> . expr BITWISELS INT
    (60) expr -> . expr BITWISERS INT
    (61) expr -> . BITWISENOT expr
    (62) expr -> . INT
    (63) expr -> . FLOAT
    (64) expr -> . STR
    (65) expr -> . ID
    (66) expr -> . bool
    (67) expr -> . LPAREN expr RPAREN
    (68) expr -> . MINUS expr
    (69) bool -> . TRUE
    (70) bool -> . FALSE

    BITWISENOT      shift and go to state 32
    INT             shift and go to state 31
    FLOAT           shift and go to state 33
    STR             shift and go to state 34
    ID              shift and go to state 35
    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expr                           shift and go to state 102
    bool                           shift and go to state 36

state 67

    (52) expr -> expr MUL . expr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr MUL expr
    (53) expr -> . expr DIV expr
    (54) expr -> . expr MOD expr
    (55) expr -> . expr POWER expr
    (56) expr -> . expr BITWISEAND expr
    (57) expr -> . expr BITWISEOR expr
    (58) expr -> . expr BITWISEXOR expr
    (59) expr -> . expr BITWISELS INT
    (60) expr -> . expr BITWISERS INT
    (61) expr -> . BITWISENOT expr
    (62) expr -> . INT
    (63) expr -> . FLOAT
    (64) expr -> . STR
    (65) expr -> . ID
    (66) expr -> . bool
    (67) expr -> . LPAREN expr RPAREN
    (68) expr -> . MINUS expr
    (69) bool -> . TRUE
    (70) bool -> . FALSE

    BITWISENOT      shift and go to state 32
    INT             shift and go to state 31
    FLOAT           shift and go to state 33
    STR             shift and go to state 34
    ID              shift and go to state 35
    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expr                           shift and go to state 103
    bool                           shift and go to state 36

state 68

    (53) expr -> expr DIV . expr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr MUL expr
    (53) expr -> . expr DIV expr
    (54) expr -> . expr MOD expr
    (55) expr -> . expr POWER expr
    (56) expr -> . expr BITWISEAND expr
    (57) expr -> . expr BITWISEOR expr
    (58) expr -> . expr BITWISEXOR expr
    (59) expr -> . expr BITWISELS INT
    (60) expr -> . expr BITWISERS INT
    (61) expr -> . BITWISENOT expr
    (62) expr -> . INT
    (63) expr -> . FLOAT
    (64) expr -> . STR
    (65) expr -> . ID
    (66) expr -> . bool
    (67) expr -> . LPAREN expr RPAREN
    (68) expr -> . MINUS expr
    (69) bool -> . TRUE
    (70) bool -> . FALSE

    BITWISENOT      shift and go to state 32
    INT             shift and go to state 31
    FLOAT           shift and go to state 33
    STR             shift and go to state 34
    ID              shift and go to state 35
    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expr                           shift and go to state 104
    bool                           shift and go to state 36

state 69

    (54) expr -> expr MOD . expr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr MUL expr
    (53) expr -> . expr DIV expr
    (54) expr -> . expr MOD expr
    (55) expr -> . expr POWER expr
    (56) expr -> . expr BITWISEAND expr
    (57) expr -> . expr BITWISEOR expr
    (58) expr -> . expr BITWISEXOR expr
    (59) expr -> . expr BITWISELS INT
    (60) expr -> . expr BITWISERS INT
    (61) expr -> . BITWISENOT expr
    (62) expr -> . INT
    (63) expr -> . FLOAT
    (64) expr -> . STR
    (65) expr -> . ID
    (66) expr -> . bool
    (67) expr -> . LPAREN expr RPAREN
    (68) expr -> . MINUS expr
    (69) bool -> . TRUE
    (70) bool -> . FALSE

    BITWISENOT      shift and go to state 32
    INT             shift and go to state 31
    FLOAT           shift and go to state 33
    STR             shift and go to state 34
    ID              shift and go to state 35
    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expr                           shift and go to state 105
    bool                           shift and go to state 36

state 70

    (55) expr -> expr POWER . expr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr MUL expr
    (53) expr -> . expr DIV expr
    (54) expr -> . expr MOD expr
    (55) expr -> . expr POWER expr
    (56) expr -> . expr BITWISEAND expr
    (57) expr -> . expr BITWISEOR expr
    (58) expr -> . expr BITWISEXOR expr
    (59) expr -> . expr BITWISELS INT
    (60) expr -> . expr BITWISERS INT
    (61) expr -> . BITWISENOT expr
    (62) expr -> . INT
    (63) expr -> . FLOAT
    (64) expr -> . STR
    (65) expr -> . ID
    (66) expr -> . bool
    (67) expr -> . LPAREN expr RPAREN
    (68) expr -> . MINUS expr
    (69) bool -> . TRUE
    (70) bool -> . FALSE

    BITWISENOT      shift and go to state 32
    INT             shift and go to state 31
    FLOAT           shift and go to state 33
    STR             shift and go to state 34
    ID              shift and go to state 35
    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expr                           shift and go to state 106
    bool                           shift and go to state 36

state 71

    (56) expr -> expr BITWISEAND . expr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr MUL expr
    (53) expr -> . expr DIV expr
    (54) expr -> . expr MOD expr
    (55) expr -> . expr POWER expr
    (56) expr -> . expr BITWISEAND expr
    (57) expr -> . expr BITWISEOR expr
    (58) expr -> . expr BITWISEXOR expr
    (59) expr -> . expr BITWISELS INT
    (60) expr -> . expr BITWISERS INT
    (61) expr -> . BITWISENOT expr
    (62) expr -> . INT
    (63) expr -> . FLOAT
    (64) expr -> . STR
    (65) expr -> . ID
    (66) expr -> . bool
    (67) expr -> . LPAREN expr RPAREN
    (68) expr -> . MINUS expr
    (69) bool -> . TRUE
    (70) bool -> . FALSE

    BITWISENOT      shift and go to state 32
    INT             shift and go to state 31
    FLOAT           shift and go to state 33
    STR             shift and go to state 34
    ID              shift and go to state 35
    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expr                           shift and go to state 107
    bool                           shift and go to state 36

state 72

    (57) expr -> expr BITWISEOR . expr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr MUL expr
    (53) expr -> . expr DIV expr
    (54) expr -> . expr MOD expr
    (55) expr -> . expr POWER expr
    (56) expr -> . expr BITWISEAND expr
    (57) expr -> . expr BITWISEOR expr
    (58) expr -> . expr BITWISEXOR expr
    (59) expr -> . expr BITWISELS INT
    (60) expr -> . expr BITWISERS INT
    (61) expr -> . BITWISENOT expr
    (62) expr -> . INT
    (63) expr -> . FLOAT
    (64) expr -> . STR
    (65) expr -> . ID
    (66) expr -> . bool
    (67) expr -> . LPAREN expr RPAREN
    (68) expr -> . MINUS expr
    (69) bool -> . TRUE
    (70) bool -> . FALSE

    BITWISENOT      shift and go to state 32
    INT             shift and go to state 31
    FLOAT           shift and go to state 33
    STR             shift and go to state 34
    ID              shift and go to state 35
    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expr                           shift and go to state 108
    bool                           shift and go to state 36

state 73

    (58) expr -> expr BITWISEXOR . expr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr MUL expr
    (53) expr -> . expr DIV expr
    (54) expr -> . expr MOD expr
    (55) expr -> . expr POWER expr
    (56) expr -> . expr BITWISEAND expr
    (57) expr -> . expr BITWISEOR expr
    (58) expr -> . expr BITWISEXOR expr
    (59) expr -> . expr BITWISELS INT
    (60) expr -> . expr BITWISERS INT
    (61) expr -> . BITWISENOT expr
    (62) expr -> . INT
    (63) expr -> . FLOAT
    (64) expr -> . STR
    (65) expr -> . ID
    (66) expr -> . bool
    (67) expr -> . LPAREN expr RPAREN
    (68) expr -> . MINUS expr
    (69) bool -> . TRUE
    (70) bool -> . FALSE

    BITWISENOT      shift and go to state 32
    INT             shift and go to state 31
    FLOAT           shift and go to state 33
    STR             shift and go to state 34
    ID              shift and go to state 35
    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expr                           shift and go to state 109
    bool                           shift and go to state 36

state 74

    (59) expr -> expr BITWISELS . INT

    INT             shift and go to state 110


state 75

    (60) expr -> expr BITWISERS . INT

    INT             shift and go to state 111


state 76

    (44) relexpr -> expr LT . expr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr MUL expr
    (53) expr -> . expr DIV expr
    (54) expr -> . expr MOD expr
    (55) expr -> . expr POWER expr
    (56) expr -> . expr BITWISEAND expr
    (57) expr -> . expr BITWISEOR expr
    (58) expr -> . expr BITWISEXOR expr
    (59) expr -> . expr BITWISELS INT
    (60) expr -> . expr BITWISERS INT
    (61) expr -> . BITWISENOT expr
    (62) expr -> . INT
    (63) expr -> . FLOAT
    (64) expr -> . STR
    (65) expr -> . ID
    (66) expr -> . bool
    (67) expr -> . LPAREN expr RPAREN
    (68) expr -> . MINUS expr
    (69) bool -> . TRUE
    (70) bool -> . FALSE

    BITWISENOT      shift and go to state 32
    INT             shift and go to state 31
    FLOAT           shift and go to state 33
    STR             shift and go to state 34
    ID              shift and go to state 35
    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expr                           shift and go to state 112
    bool                           shift and go to state 36

state 77

    (45) relexpr -> expr LTE . expr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr MUL expr
    (53) expr -> . expr DIV expr
    (54) expr -> . expr MOD expr
    (55) expr -> . expr POWER expr
    (56) expr -> . expr BITWISEAND expr
    (57) expr -> . expr BITWISEOR expr
    (58) expr -> . expr BITWISEXOR expr
    (59) expr -> . expr BITWISELS INT
    (60) expr -> . expr BITWISERS INT
    (61) expr -> . BITWISENOT expr
    (62) expr -> . INT
    (63) expr -> . FLOAT
    (64) expr -> . STR
    (65) expr -> . ID
    (66) expr -> . bool
    (67) expr -> . LPAREN expr RPAREN
    (68) expr -> . MINUS expr
    (69) bool -> . TRUE
    (70) bool -> . FALSE

    BITWISENOT      shift and go to state 32
    INT             shift and go to state 31
    FLOAT           shift and go to state 33
    STR             shift and go to state 34
    ID              shift and go to state 35
    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expr                           shift and go to state 113
    bool                           shift and go to state 36

state 78

    (46) relexpr -> expr GT . expr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr MUL expr
    (53) expr -> . expr DIV expr
    (54) expr -> . expr MOD expr
    (55) expr -> . expr POWER expr
    (56) expr -> . expr BITWISEAND expr
    (57) expr -> . expr BITWISEOR expr
    (58) expr -> . expr BITWISEXOR expr
    (59) expr -> . expr BITWISELS INT
    (60) expr -> . expr BITWISERS INT
    (61) expr -> . BITWISENOT expr
    (62) expr -> . INT
    (63) expr -> . FLOAT
    (64) expr -> . STR
    (65) expr -> . ID
    (66) expr -> . bool
    (67) expr -> . LPAREN expr RPAREN
    (68) expr -> . MINUS expr
    (69) bool -> . TRUE
    (70) bool -> . FALSE

    BITWISENOT      shift and go to state 32
    INT             shift and go to state 31
    FLOAT           shift and go to state 33
    STR             shift and go to state 34
    ID              shift and go to state 35
    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expr                           shift and go to state 114
    bool                           shift and go to state 36

state 79

    (47) relexpr -> expr GTE . expr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr MUL expr
    (53) expr -> . expr DIV expr
    (54) expr -> . expr MOD expr
    (55) expr -> . expr POWER expr
    (56) expr -> . expr BITWISEAND expr
    (57) expr -> . expr BITWISEOR expr
    (58) expr -> . expr BITWISEXOR expr
    (59) expr -> . expr BITWISELS INT
    (60) expr -> . expr BITWISERS INT
    (61) expr -> . BITWISENOT expr
    (62) expr -> . INT
    (63) expr -> . FLOAT
    (64) expr -> . STR
    (65) expr -> . ID
    (66) expr -> . bool
    (67) expr -> . LPAREN expr RPAREN
    (68) expr -> . MINUS expr
    (69) bool -> . TRUE
    (70) bool -> . FALSE

    BITWISENOT      shift and go to state 32
    INT             shift and go to state 31
    FLOAT           shift and go to state 33
    STR             shift and go to state 34
    ID              shift and go to state 35
    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expr                           shift and go to state 115
    bool                           shift and go to state 36

state 80

    (48) relexpr -> expr EQUAL . expr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr MUL expr
    (53) expr -> . expr DIV expr
    (54) expr -> . expr MOD expr
    (55) expr -> . expr POWER expr
    (56) expr -> . expr BITWISEAND expr
    (57) expr -> . expr BITWISEOR expr
    (58) expr -> . expr BITWISEXOR expr
    (59) expr -> . expr BITWISELS INT
    (60) expr -> . expr BITWISERS INT
    (61) expr -> . BITWISENOT expr
    (62) expr -> . INT
    (63) expr -> . FLOAT
    (64) expr -> . STR
    (65) expr -> . ID
    (66) expr -> . bool
    (67) expr -> . LPAREN expr RPAREN
    (68) expr -> . MINUS expr
    (69) bool -> . TRUE
    (70) bool -> . FALSE

    BITWISENOT      shift and go to state 32
    INT             shift and go to state 31
    FLOAT           shift and go to state 33
    STR             shift and go to state 34
    ID              shift and go to state 35
    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expr                           shift and go to state 116
    bool                           shift and go to state 36

state 81

    (49) relexpr -> expr NOTEQUAL . expr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr MUL expr
    (53) expr -> . expr DIV expr
    (54) expr -> . expr MOD expr
    (55) expr -> . expr POWER expr
    (56) expr -> . expr BITWISEAND expr
    (57) expr -> . expr BITWISEOR expr
    (58) expr -> . expr BITWISEXOR expr
    (59) expr -> . expr BITWISELS INT
    (60) expr -> . expr BITWISERS INT
    (61) expr -> . BITWISENOT expr
    (62) expr -> . INT
    (63) expr -> . FLOAT
    (64) expr -> . STR
    (65) expr -> . ID
    (66) expr -> . bool
    (67) expr -> . LPAREN expr RPAREN
    (68) expr -> . MINUS expr
    (69) bool -> . TRUE
    (70) bool -> . FALSE

    BITWISENOT      shift and go to state 32
    INT             shift and go to state 31
    FLOAT           shift and go to state 33
    STR             shift and go to state 34
    ID              shift and go to state 35
    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expr                           shift and go to state 117
    bool                           shift and go to state 36

state 82

    (13) command -> IF error optlvlinc .

    NEWLINE         reduce using rule 13 (command -> IF error optlvlinc .)


state 83

    (43) boolexpr -> NOT boolexpr .
    (41) boolexpr -> boolexpr . AND boolexpr
    (42) boolexpr -> boolexpr . OR boolexpr

    AND             reduce using rule 43 (boolexpr -> NOT boolexpr .)
    OR              reduce using rule 43 (boolexpr -> NOT boolexpr .)
    STEPIN          reduce using rule 43 (boolexpr -> NOT boolexpr .)
    NEWLINE         reduce using rule 43 (boolexpr -> NOT boolexpr .)
    RETASSIGN       reduce using rule 43 (boolexpr -> NOT boolexpr .)
    SEP             reduce using rule 43 (boolexpr -> NOT boolexpr .)

  ! AND             [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]


state 84

    (68) expr -> MINUS expr .
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . MUL expr
    (53) expr -> expr . DIV expr
    (54) expr -> expr . MOD expr
    (55) expr -> expr . POWER expr
    (56) expr -> expr . BITWISEAND expr
    (57) expr -> expr . BITWISEOR expr
    (58) expr -> expr . BITWISEXOR expr
    (59) expr -> expr . BITWISELS INT
    (60) expr -> expr . BITWISERS INT

    PLUS            reduce using rule 68 (expr -> MINUS expr .)
    MINUS           reduce using rule 68 (expr -> MINUS expr .)
    MUL             reduce using rule 68 (expr -> MINUS expr .)
    DIV             reduce using rule 68 (expr -> MINUS expr .)
    MOD             reduce using rule 68 (expr -> MINUS expr .)
    POWER           reduce using rule 68 (expr -> MINUS expr .)
    BITWISEAND      reduce using rule 68 (expr -> MINUS expr .)
    BITWISEOR       reduce using rule 68 (expr -> MINUS expr .)
    BITWISEXOR      reduce using rule 68 (expr -> MINUS expr .)
    BITWISELS       reduce using rule 68 (expr -> MINUS expr .)
    BITWISERS       reduce using rule 68 (expr -> MINUS expr .)
    LT              reduce using rule 68 (expr -> MINUS expr .)
    LTE             reduce using rule 68 (expr -> MINUS expr .)
    GT              reduce using rule 68 (expr -> MINUS expr .)
    GTE             reduce using rule 68 (expr -> MINUS expr .)
    EQUAL           reduce using rule 68 (expr -> MINUS expr .)
    NOTEQUAL        reduce using rule 68 (expr -> MINUS expr .)
    STEPIN          reduce using rule 68 (expr -> MINUS expr .)
    NEWLINE         reduce using rule 68 (expr -> MINUS expr .)
    RETASSIGN       reduce using rule 68 (expr -> MINUS expr .)
    SEP             reduce using rule 68 (expr -> MINUS expr .)
    RPAREN          reduce using rule 68 (expr -> MINUS expr .)
    TO              reduce using rule 68 (expr -> MINUS expr .)
    AND             reduce using rule 68 (expr -> MINUS expr .)
    OR              reduce using rule 68 (expr -> MINUS expr .)
    STEP            reduce using rule 68 (expr -> MINUS expr .)

  ! PLUS            [ shift and go to state 65 ]
  ! MINUS           [ shift and go to state 66 ]
  ! MUL             [ shift and go to state 67 ]
  ! DIV             [ shift and go to state 68 ]
  ! MOD             [ shift and go to state 69 ]
  ! POWER           [ shift and go to state 70 ]
  ! BITWISEAND      [ shift and go to state 71 ]
  ! BITWISEOR       [ shift and go to state 72 ]
  ! BITWISEXOR      [ shift and go to state 73 ]
  ! BITWISELS       [ shift and go to state 74 ]
  ! BITWISERS       [ shift and go to state 75 ]


state 85

    (61) expr -> BITWISENOT expr .
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . MUL expr
    (53) expr -> expr . DIV expr
    (54) expr -> expr . MOD expr
    (55) expr -> expr . POWER expr
    (56) expr -> expr . BITWISEAND expr
    (57) expr -> expr . BITWISEOR expr
    (58) expr -> expr . BITWISEXOR expr
    (59) expr -> expr . BITWISELS INT
    (60) expr -> expr . BITWISERS INT

    PLUS            reduce using rule 61 (expr -> BITWISENOT expr .)
    MINUS           reduce using rule 61 (expr -> BITWISENOT expr .)
    MUL             reduce using rule 61 (expr -> BITWISENOT expr .)
    DIV             reduce using rule 61 (expr -> BITWISENOT expr .)
    MOD             reduce using rule 61 (expr -> BITWISENOT expr .)
    POWER           reduce using rule 61 (expr -> BITWISENOT expr .)
    BITWISEAND      reduce using rule 61 (expr -> BITWISENOT expr .)
    BITWISEOR       reduce using rule 61 (expr -> BITWISENOT expr .)
    BITWISEXOR      reduce using rule 61 (expr -> BITWISENOT expr .)
    BITWISELS       reduce using rule 61 (expr -> BITWISENOT expr .)
    BITWISERS       reduce using rule 61 (expr -> BITWISENOT expr .)
    LT              reduce using rule 61 (expr -> BITWISENOT expr .)
    LTE             reduce using rule 61 (expr -> BITWISENOT expr .)
    GT              reduce using rule 61 (expr -> BITWISENOT expr .)
    GTE             reduce using rule 61 (expr -> BITWISENOT expr .)
    EQUAL           reduce using rule 61 (expr -> BITWISENOT expr .)
    NOTEQUAL        reduce using rule 61 (expr -> BITWISENOT expr .)
    STEPIN          reduce using rule 61 (expr -> BITWISENOT expr .)
    NEWLINE         reduce using rule 61 (expr -> BITWISENOT expr .)
    RETASSIGN       reduce using rule 61 (expr -> BITWISENOT expr .)
    SEP             reduce using rule 61 (expr -> BITWISENOT expr .)
    RPAREN          reduce using rule 61 (expr -> BITWISENOT expr .)
    TO              reduce using rule 61 (expr -> BITWISENOT expr .)
    AND             reduce using rule 61 (expr -> BITWISENOT expr .)
    OR              reduce using rule 61 (expr -> BITWISENOT expr .)
    STEP            reduce using rule 61 (expr -> BITWISENOT expr .)

  ! PLUS            [ shift and go to state 65 ]
  ! MINUS           [ shift and go to state 66 ]
  ! MUL             [ shift and go to state 67 ]
  ! DIV             [ shift and go to state 68 ]
  ! MOD             [ shift and go to state 69 ]
  ! POWER           [ shift and go to state 70 ]
  ! BITWISEAND      [ shift and go to state 71 ]
  ! BITWISEOR       [ shift and go to state 72 ]
  ! BITWISEXOR      [ shift and go to state 73 ]
  ! BITWISELS       [ shift and go to state 74 ]
  ! BITWISERS       [ shift and go to state 75 ]


state 86

    (67) expr -> LPAREN expr . RPAREN
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . MUL expr
    (53) expr -> expr . DIV expr
    (54) expr -> expr . MOD expr
    (55) expr -> expr . POWER expr
    (56) expr -> expr . BITWISEAND expr
    (57) expr -> expr . BITWISEOR expr
    (58) expr -> expr . BITWISEXOR expr
    (59) expr -> expr . BITWISELS INT
    (60) expr -> expr . BITWISERS INT

    RPAREN          shift and go to state 118
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    MUL             shift and go to state 67
    DIV             shift and go to state 68
    MOD             shift and go to state 69
    POWER           shift and go to state 70
    BITWISEAND      shift and go to state 71
    BITWISEOR       shift and go to state 72
    BITWISEXOR      shift and go to state 73
    BITWISELS       shift and go to state 74
    BITWISERS       shift and go to state 75


state 87

    (14) command -> optlvldec ELSE IF . boolexpr optlvlinc
    (15) command -> optlvldec ELSE IF . error optlvlinc
    (40) boolexpr -> . relexpr
    (41) boolexpr -> . boolexpr AND boolexpr
    (42) boolexpr -> . boolexpr OR boolexpr
    (43) boolexpr -> . NOT boolexpr
    (44) relexpr -> . expr LT expr
    (45) relexpr -> . expr LTE expr
    (46) relexpr -> . expr GT expr
    (47) relexpr -> . expr GTE expr
    (48) relexpr -> . expr EQUAL expr
    (49) relexpr -> . expr NOTEQUAL expr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr MUL expr
    (53) expr -> . expr DIV expr
    (54) expr -> . expr MOD expr
    (55) expr -> . expr POWER expr
    (56) expr -> . expr BITWISEAND expr
    (57) expr -> . expr BITWISEOR expr
    (58) expr -> . expr BITWISEXOR expr
    (59) expr -> . expr BITWISELS INT
    (60) expr -> . expr BITWISERS INT
    (61) expr -> . BITWISENOT expr
    (62) expr -> . INT
    (63) expr -> . FLOAT
    (64) expr -> . STR
    (65) expr -> . ID
    (66) expr -> . bool
    (67) expr -> . LPAREN expr RPAREN
    (68) expr -> . MINUS expr
    (69) bool -> . TRUE
    (70) bool -> . FALSE

    error           shift and go to state 120
    NOT             shift and go to state 29
    BITWISENOT      shift and go to state 32
    INT             shift and go to state 31
    FLOAT           shift and go to state 33
    STR             shift and go to state 34
    ID              shift and go to state 35
    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    boolexpr                       shift and go to state 119
    relexpr                        shift and go to state 28
    expr                           shift and go to state 44
    bool                           shift and go to state 36

state 88

    (16) command -> optlvldec ELSE optlvlinc .

    NEWLINE         reduce using rule 16 (command -> optlvldec ELSE optlvlinc .)


state 89

    (17) command -> WHILE boolexpr optlvlinc .

    NEWLINE         reduce using rule 17 (command -> WHILE boolexpr optlvlinc .)


state 90

    (18) command -> WHILE bool optlvlinc .

    NEWLINE         reduce using rule 18 (command -> WHILE bool optlvlinc .)


state 91

    (19) command -> WHILE error optlvlinc .

    NEWLINE         reduce using rule 19 (command -> WHILE error optlvlinc .)


state 92

    (20) command -> ADD_DEV ID expr .
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . MUL expr
    (53) expr -> expr . DIV expr
    (54) expr -> expr . MOD expr
    (55) expr -> expr . POWER expr
    (56) expr -> expr . BITWISEAND expr
    (57) expr -> expr . BITWISEOR expr
    (58) expr -> expr . BITWISEXOR expr
    (59) expr -> expr . BITWISELS INT
    (60) expr -> expr . BITWISERS INT

    NEWLINE         reduce using rule 20 (command -> ADD_DEV ID expr .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    MUL             shift and go to state 67
    DIV             shift and go to state 68
    MOD             shift and go to state 69
    POWER           shift and go to state 70
    BITWISEAND      shift and go to state 71
    BITWISEOR       shift and go to state 72
    BITWISEXOR      shift and go to state 73
    BITWISELS       shift and go to state 74
    BITWISERS       shift and go to state 75


state 93

    (21) command -> ADD_DEV ID error .

    NEWLINE         reduce using rule 21 (command -> ADD_DEV ID error .)


state 94

    (23) command -> CMD RETASSIGN ID .

    NEWLINE         reduce using rule 23 (command -> CMD RETASSIGN ID .)


state 95

    (25) command -> CMD paramlist RETASSIGN . ID

    ID              shift and go to state 121


state 96

    (71) paramlist -> paramlist SEP . param
    (73) param -> . expr
    (74) param -> . boolexpr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr MUL expr
    (53) expr -> . expr DIV expr
    (54) expr -> . expr MOD expr
    (55) expr -> . expr POWER expr
    (56) expr -> . expr BITWISEAND expr
    (57) expr -> . expr BITWISEOR expr
    (58) expr -> . expr BITWISEXOR expr
    (59) expr -> . expr BITWISELS INT
    (60) expr -> . expr BITWISERS INT
    (61) expr -> . BITWISENOT expr
    (62) expr -> . INT
    (63) expr -> . FLOAT
    (64) expr -> . STR
    (65) expr -> . ID
    (66) expr -> . bool
    (67) expr -> . LPAREN expr RPAREN
    (68) expr -> . MINUS expr
    (40) boolexpr -> . relexpr
    (41) boolexpr -> . boolexpr AND boolexpr
    (42) boolexpr -> . boolexpr OR boolexpr
    (43) boolexpr -> . NOT boolexpr
    (69) bool -> . TRUE
    (70) bool -> . FALSE
    (44) relexpr -> . expr LT expr
    (45) relexpr -> . expr LTE expr
    (46) relexpr -> . expr GT expr
    (47) relexpr -> . expr GTE expr
    (48) relexpr -> . expr EQUAL expr
    (49) relexpr -> . expr NOTEQUAL expr

    BITWISENOT      shift and go to state 32
    INT             shift and go to state 31
    FLOAT           shift and go to state 33
    STR             shift and go to state 34
    ID              shift and go to state 35
    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    NOT             shift and go to state 29
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    param                          shift and go to state 122
    expr                           shift and go to state 50
    boolexpr                       shift and go to state 51
    bool                           shift and go to state 36
    relexpr                        shift and go to state 28

state 97

    (7) command -> FOR ID ASSIGN expr . TO expr optstep optlvlinc
    (9) command -> FOR ID ASSIGN expr . TO error optstep optlvlinc
    (10) command -> FOR ID ASSIGN expr . TO expr STEP error
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . MUL expr
    (53) expr -> expr . DIV expr
    (54) expr -> expr . MOD expr
    (55) expr -> expr . POWER expr
    (56) expr -> expr . BITWISEAND expr
    (57) expr -> expr . BITWISEOR expr
    (58) expr -> expr . BITWISEXOR expr
    (59) expr -> expr . BITWISELS INT
    (60) expr -> expr . BITWISERS INT

    TO              shift and go to state 123
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    MUL             shift and go to state 67
    DIV             shift and go to state 68
    MOD             shift and go to state 69
    POWER           shift and go to state 70
    BITWISEAND      shift and go to state 71
    BITWISEOR       shift and go to state 72
    BITWISEXOR      shift and go to state 73
    BITWISELS       shift and go to state 74
    BITWISERS       shift and go to state 75


state 98

    (8) command -> FOR ID ASSIGN error . TO expr optstep optlvlinc

    TO              shift and go to state 124


state 99

    (41) boolexpr -> boolexpr AND boolexpr .
    (41) boolexpr -> boolexpr . AND boolexpr
    (42) boolexpr -> boolexpr . OR boolexpr

    AND             reduce using rule 41 (boolexpr -> boolexpr AND boolexpr .)
    OR              reduce using rule 41 (boolexpr -> boolexpr AND boolexpr .)
    STEPIN          reduce using rule 41 (boolexpr -> boolexpr AND boolexpr .)
    NEWLINE         reduce using rule 41 (boolexpr -> boolexpr AND boolexpr .)
    RETASSIGN       reduce using rule 41 (boolexpr -> boolexpr AND boolexpr .)
    SEP             reduce using rule 41 (boolexpr -> boolexpr AND boolexpr .)

  ! AND             [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]


state 100

    (42) boolexpr -> boolexpr OR boolexpr .
    (41) boolexpr -> boolexpr . AND boolexpr
    (42) boolexpr -> boolexpr . OR boolexpr

    AND             reduce using rule 42 (boolexpr -> boolexpr OR boolexpr .)
    OR              reduce using rule 42 (boolexpr -> boolexpr OR boolexpr .)
    STEPIN          reduce using rule 42 (boolexpr -> boolexpr OR boolexpr .)
    NEWLINE         reduce using rule 42 (boolexpr -> boolexpr OR boolexpr .)
    RETASSIGN       reduce using rule 42 (boolexpr -> boolexpr OR boolexpr .)
    SEP             reduce using rule 42 (boolexpr -> boolexpr OR boolexpr .)

  ! AND             [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]


state 101

    (50) expr -> expr PLUS expr .
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . MUL expr
    (53) expr -> expr . DIV expr
    (54) expr -> expr . MOD expr
    (55) expr -> expr . POWER expr
    (56) expr -> expr . BITWISEAND expr
    (57) expr -> expr . BITWISEOR expr
    (58) expr -> expr . BITWISEXOR expr
    (59) expr -> expr . BITWISELS INT
    (60) expr -> expr . BITWISERS INT

    PLUS            reduce using rule 50 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 50 (expr -> expr PLUS expr .)
    BITWISELS       reduce using rule 50 (expr -> expr PLUS expr .)
    BITWISERS       reduce using rule 50 (expr -> expr PLUS expr .)
    LT              reduce using rule 50 (expr -> expr PLUS expr .)
    LTE             reduce using rule 50 (expr -> expr PLUS expr .)
    GT              reduce using rule 50 (expr -> expr PLUS expr .)
    GTE             reduce using rule 50 (expr -> expr PLUS expr .)
    EQUAL           reduce using rule 50 (expr -> expr PLUS expr .)
    NOTEQUAL        reduce using rule 50 (expr -> expr PLUS expr .)
    STEPIN          reduce using rule 50 (expr -> expr PLUS expr .)
    NEWLINE         reduce using rule 50 (expr -> expr PLUS expr .)
    RETASSIGN       reduce using rule 50 (expr -> expr PLUS expr .)
    SEP             reduce using rule 50 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 50 (expr -> expr PLUS expr .)
    TO              reduce using rule 50 (expr -> expr PLUS expr .)
    AND             reduce using rule 50 (expr -> expr PLUS expr .)
    OR              reduce using rule 50 (expr -> expr PLUS expr .)
    STEP            reduce using rule 50 (expr -> expr PLUS expr .)
    MUL             shift and go to state 67
    DIV             shift and go to state 68
    MOD             shift and go to state 69
    POWER           shift and go to state 70
    BITWISEAND      shift and go to state 71
    BITWISEOR       shift and go to state 72
    BITWISEXOR      shift and go to state 73

  ! MUL             [ reduce using rule 50 (expr -> expr PLUS expr .) ]
  ! DIV             [ reduce using rule 50 (expr -> expr PLUS expr .) ]
  ! MOD             [ reduce using rule 50 (expr -> expr PLUS expr .) ]
  ! POWER           [ reduce using rule 50 (expr -> expr PLUS expr .) ]
  ! BITWISEAND      [ reduce using rule 50 (expr -> expr PLUS expr .) ]
  ! BITWISEOR       [ reduce using rule 50 (expr -> expr PLUS expr .) ]
  ! BITWISEXOR      [ reduce using rule 50 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 65 ]
  ! MINUS           [ shift and go to state 66 ]
  ! BITWISELS       [ shift and go to state 74 ]
  ! BITWISERS       [ shift and go to state 75 ]


state 102

    (51) expr -> expr MINUS expr .
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . MUL expr
    (53) expr -> expr . DIV expr
    (54) expr -> expr . MOD expr
    (55) expr -> expr . POWER expr
    (56) expr -> expr . BITWISEAND expr
    (57) expr -> expr . BITWISEOR expr
    (58) expr -> expr . BITWISEXOR expr
    (59) expr -> expr . BITWISELS INT
    (60) expr -> expr . BITWISERS INT

    PLUS            reduce using rule 51 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 51 (expr -> expr MINUS expr .)
    BITWISELS       reduce using rule 51 (expr -> expr MINUS expr .)
    BITWISERS       reduce using rule 51 (expr -> expr MINUS expr .)
    LT              reduce using rule 51 (expr -> expr MINUS expr .)
    LTE             reduce using rule 51 (expr -> expr MINUS expr .)
    GT              reduce using rule 51 (expr -> expr MINUS expr .)
    GTE             reduce using rule 51 (expr -> expr MINUS expr .)
    EQUAL           reduce using rule 51 (expr -> expr MINUS expr .)
    NOTEQUAL        reduce using rule 51 (expr -> expr MINUS expr .)
    STEPIN          reduce using rule 51 (expr -> expr MINUS expr .)
    NEWLINE         reduce using rule 51 (expr -> expr MINUS expr .)
    RETASSIGN       reduce using rule 51 (expr -> expr MINUS expr .)
    SEP             reduce using rule 51 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 51 (expr -> expr MINUS expr .)
    TO              reduce using rule 51 (expr -> expr MINUS expr .)
    AND             reduce using rule 51 (expr -> expr MINUS expr .)
    OR              reduce using rule 51 (expr -> expr MINUS expr .)
    STEP            reduce using rule 51 (expr -> expr MINUS expr .)
    MUL             shift and go to state 67
    DIV             shift and go to state 68
    MOD             shift and go to state 69
    POWER           shift and go to state 70
    BITWISEAND      shift and go to state 71
    BITWISEOR       shift and go to state 72
    BITWISEXOR      shift and go to state 73

  ! MUL             [ reduce using rule 51 (expr -> expr MINUS expr .) ]
  ! DIV             [ reduce using rule 51 (expr -> expr MINUS expr .) ]
  ! MOD             [ reduce using rule 51 (expr -> expr MINUS expr .) ]
  ! POWER           [ reduce using rule 51 (expr -> expr MINUS expr .) ]
  ! BITWISEAND      [ reduce using rule 51 (expr -> expr MINUS expr .) ]
  ! BITWISEOR       [ reduce using rule 51 (expr -> expr MINUS expr .) ]
  ! BITWISEXOR      [ reduce using rule 51 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 65 ]
  ! MINUS           [ shift and go to state 66 ]
  ! BITWISELS       [ shift and go to state 74 ]
  ! BITWISERS       [ shift and go to state 75 ]


state 103

    (52) expr -> expr MUL expr .
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . MUL expr
    (53) expr -> expr . DIV expr
    (54) expr -> expr . MOD expr
    (55) expr -> expr . POWER expr
    (56) expr -> expr . BITWISEAND expr
    (57) expr -> expr . BITWISEOR expr
    (58) expr -> expr . BITWISEXOR expr
    (59) expr -> expr . BITWISELS INT
    (60) expr -> expr . BITWISERS INT

    PLUS            reduce using rule 52 (expr -> expr MUL expr .)
    MINUS           reduce using rule 52 (expr -> expr MUL expr .)
    MUL             reduce using rule 52 (expr -> expr MUL expr .)
    DIV             reduce using rule 52 (expr -> expr MUL expr .)
    MOD             reduce using rule 52 (expr -> expr MUL expr .)
    BITWISEAND      reduce using rule 52 (expr -> expr MUL expr .)
    BITWISEOR       reduce using rule 52 (expr -> expr MUL expr .)
    BITWISEXOR      reduce using rule 52 (expr -> expr MUL expr .)
    BITWISELS       reduce using rule 52 (expr -> expr MUL expr .)
    BITWISERS       reduce using rule 52 (expr -> expr MUL expr .)
    LT              reduce using rule 52 (expr -> expr MUL expr .)
    LTE             reduce using rule 52 (expr -> expr MUL expr .)
    GT              reduce using rule 52 (expr -> expr MUL expr .)
    GTE             reduce using rule 52 (expr -> expr MUL expr .)
    EQUAL           reduce using rule 52 (expr -> expr MUL expr .)
    NOTEQUAL        reduce using rule 52 (expr -> expr MUL expr .)
    STEPIN          reduce using rule 52 (expr -> expr MUL expr .)
    NEWLINE         reduce using rule 52 (expr -> expr MUL expr .)
    RETASSIGN       reduce using rule 52 (expr -> expr MUL expr .)
    SEP             reduce using rule 52 (expr -> expr MUL expr .)
    RPAREN          reduce using rule 52 (expr -> expr MUL expr .)
    TO              reduce using rule 52 (expr -> expr MUL expr .)
    AND             reduce using rule 52 (expr -> expr MUL expr .)
    OR              reduce using rule 52 (expr -> expr MUL expr .)
    STEP            reduce using rule 52 (expr -> expr MUL expr .)
    POWER           shift and go to state 70

  ! POWER           [ reduce using rule 52 (expr -> expr MUL expr .) ]
  ! PLUS            [ shift and go to state 65 ]
  ! MINUS           [ shift and go to state 66 ]
  ! MUL             [ shift and go to state 67 ]
  ! DIV             [ shift and go to state 68 ]
  ! MOD             [ shift and go to state 69 ]
  ! BITWISEAND      [ shift and go to state 71 ]
  ! BITWISEOR       [ shift and go to state 72 ]
  ! BITWISEXOR      [ shift and go to state 73 ]
  ! BITWISELS       [ shift and go to state 74 ]
  ! BITWISERS       [ shift and go to state 75 ]


state 104

    (53) expr -> expr DIV expr .
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . MUL expr
    (53) expr -> expr . DIV expr
    (54) expr -> expr . MOD expr
    (55) expr -> expr . POWER expr
    (56) expr -> expr . BITWISEAND expr
    (57) expr -> expr . BITWISEOR expr
    (58) expr -> expr . BITWISEXOR expr
    (59) expr -> expr . BITWISELS INT
    (60) expr -> expr . BITWISERS INT

    PLUS            reduce using rule 53 (expr -> expr DIV expr .)
    MINUS           reduce using rule 53 (expr -> expr DIV expr .)
    MUL             reduce using rule 53 (expr -> expr DIV expr .)
    DIV             reduce using rule 53 (expr -> expr DIV expr .)
    MOD             reduce using rule 53 (expr -> expr DIV expr .)
    BITWISEAND      reduce using rule 53 (expr -> expr DIV expr .)
    BITWISEOR       reduce using rule 53 (expr -> expr DIV expr .)
    BITWISEXOR      reduce using rule 53 (expr -> expr DIV expr .)
    BITWISELS       reduce using rule 53 (expr -> expr DIV expr .)
    BITWISERS       reduce using rule 53 (expr -> expr DIV expr .)
    LT              reduce using rule 53 (expr -> expr DIV expr .)
    LTE             reduce using rule 53 (expr -> expr DIV expr .)
    GT              reduce using rule 53 (expr -> expr DIV expr .)
    GTE             reduce using rule 53 (expr -> expr DIV expr .)
    EQUAL           reduce using rule 53 (expr -> expr DIV expr .)
    NOTEQUAL        reduce using rule 53 (expr -> expr DIV expr .)
    STEPIN          reduce using rule 53 (expr -> expr DIV expr .)
    NEWLINE         reduce using rule 53 (expr -> expr DIV expr .)
    RETASSIGN       reduce using rule 53 (expr -> expr DIV expr .)
    SEP             reduce using rule 53 (expr -> expr DIV expr .)
    RPAREN          reduce using rule 53 (expr -> expr DIV expr .)
    TO              reduce using rule 53 (expr -> expr DIV expr .)
    AND             reduce using rule 53 (expr -> expr DIV expr .)
    OR              reduce using rule 53 (expr -> expr DIV expr .)
    STEP            reduce using rule 53 (expr -> expr DIV expr .)
    POWER           shift and go to state 70

  ! POWER           [ reduce using rule 53 (expr -> expr DIV expr .) ]
  ! PLUS            [ shift and go to state 65 ]
  ! MINUS           [ shift and go to state 66 ]
  ! MUL             [ shift and go to state 67 ]
  ! DIV             [ shift and go to state 68 ]
  ! MOD             [ shift and go to state 69 ]
  ! BITWISEAND      [ shift and go to state 71 ]
  ! BITWISEOR       [ shift and go to state 72 ]
  ! BITWISEXOR      [ shift and go to state 73 ]
  ! BITWISELS       [ shift and go to state 74 ]
  ! BITWISERS       [ shift and go to state 75 ]


state 105

    (54) expr -> expr MOD expr .
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . MUL expr
    (53) expr -> expr . DIV expr
    (54) expr -> expr . MOD expr
    (55) expr -> expr . POWER expr
    (56) expr -> expr . BITWISEAND expr
    (57) expr -> expr . BITWISEOR expr
    (58) expr -> expr . BITWISEXOR expr
    (59) expr -> expr . BITWISELS INT
    (60) expr -> expr . BITWISERS INT

    PLUS            reduce using rule 54 (expr -> expr MOD expr .)
    MINUS           reduce using rule 54 (expr -> expr MOD expr .)
    MUL             reduce using rule 54 (expr -> expr MOD expr .)
    DIV             reduce using rule 54 (expr -> expr MOD expr .)
    MOD             reduce using rule 54 (expr -> expr MOD expr .)
    BITWISEAND      reduce using rule 54 (expr -> expr MOD expr .)
    BITWISEOR       reduce using rule 54 (expr -> expr MOD expr .)
    BITWISEXOR      reduce using rule 54 (expr -> expr MOD expr .)
    BITWISELS       reduce using rule 54 (expr -> expr MOD expr .)
    BITWISERS       reduce using rule 54 (expr -> expr MOD expr .)
    LT              reduce using rule 54 (expr -> expr MOD expr .)
    LTE             reduce using rule 54 (expr -> expr MOD expr .)
    GT              reduce using rule 54 (expr -> expr MOD expr .)
    GTE             reduce using rule 54 (expr -> expr MOD expr .)
    EQUAL           reduce using rule 54 (expr -> expr MOD expr .)
    NOTEQUAL        reduce using rule 54 (expr -> expr MOD expr .)
    STEPIN          reduce using rule 54 (expr -> expr MOD expr .)
    NEWLINE         reduce using rule 54 (expr -> expr MOD expr .)
    RETASSIGN       reduce using rule 54 (expr -> expr MOD expr .)
    SEP             reduce using rule 54 (expr -> expr MOD expr .)
    RPAREN          reduce using rule 54 (expr -> expr MOD expr .)
    TO              reduce using rule 54 (expr -> expr MOD expr .)
    AND             reduce using rule 54 (expr -> expr MOD expr .)
    OR              reduce using rule 54 (expr -> expr MOD expr .)
    STEP            reduce using rule 54 (expr -> expr MOD expr .)
    POWER           shift and go to state 70

  ! POWER           [ reduce using rule 54 (expr -> expr MOD expr .) ]
  ! PLUS            [ shift and go to state 65 ]
  ! MINUS           [ shift and go to state 66 ]
  ! MUL             [ shift and go to state 67 ]
  ! DIV             [ shift and go to state 68 ]
  ! MOD             [ shift and go to state 69 ]
  ! BITWISEAND      [ shift and go to state 71 ]
  ! BITWISEOR       [ shift and go to state 72 ]
  ! BITWISEXOR      [ shift and go to state 73 ]
  ! BITWISELS       [ shift and go to state 74 ]
  ! BITWISERS       [ shift and go to state 75 ]


state 106

    (55) expr -> expr POWER expr .
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . MUL expr
    (53) expr -> expr . DIV expr
    (54) expr -> expr . MOD expr
    (55) expr -> expr . POWER expr
    (56) expr -> expr . BITWISEAND expr
    (57) expr -> expr . BITWISEOR expr
    (58) expr -> expr . BITWISEXOR expr
    (59) expr -> expr . BITWISELS INT
    (60) expr -> expr . BITWISERS INT

    PLUS            reduce using rule 55 (expr -> expr POWER expr .)
    MINUS           reduce using rule 55 (expr -> expr POWER expr .)
    MUL             reduce using rule 55 (expr -> expr POWER expr .)
    DIV             reduce using rule 55 (expr -> expr POWER expr .)
    MOD             reduce using rule 55 (expr -> expr POWER expr .)
    POWER           reduce using rule 55 (expr -> expr POWER expr .)
    BITWISEAND      reduce using rule 55 (expr -> expr POWER expr .)
    BITWISEOR       reduce using rule 55 (expr -> expr POWER expr .)
    BITWISEXOR      reduce using rule 55 (expr -> expr POWER expr .)
    BITWISELS       reduce using rule 55 (expr -> expr POWER expr .)
    BITWISERS       reduce using rule 55 (expr -> expr POWER expr .)
    LT              reduce using rule 55 (expr -> expr POWER expr .)
    LTE             reduce using rule 55 (expr -> expr POWER expr .)
    GT              reduce using rule 55 (expr -> expr POWER expr .)
    GTE             reduce using rule 55 (expr -> expr POWER expr .)
    EQUAL           reduce using rule 55 (expr -> expr POWER expr .)
    NOTEQUAL        reduce using rule 55 (expr -> expr POWER expr .)
    STEPIN          reduce using rule 55 (expr -> expr POWER expr .)
    NEWLINE         reduce using rule 55 (expr -> expr POWER expr .)
    RETASSIGN       reduce using rule 55 (expr -> expr POWER expr .)
    SEP             reduce using rule 55 (expr -> expr POWER expr .)
    RPAREN          reduce using rule 55 (expr -> expr POWER expr .)
    TO              reduce using rule 55 (expr -> expr POWER expr .)
    AND             reduce using rule 55 (expr -> expr POWER expr .)
    OR              reduce using rule 55 (expr -> expr POWER expr .)
    STEP            reduce using rule 55 (expr -> expr POWER expr .)

  ! PLUS            [ shift and go to state 65 ]
  ! MINUS           [ shift and go to state 66 ]
  ! MUL             [ shift and go to state 67 ]
  ! DIV             [ shift and go to state 68 ]
  ! MOD             [ shift and go to state 69 ]
  ! POWER           [ shift and go to state 70 ]
  ! BITWISEAND      [ shift and go to state 71 ]
  ! BITWISEOR       [ shift and go to state 72 ]
  ! BITWISEXOR      [ shift and go to state 73 ]
  ! BITWISELS       [ shift and go to state 74 ]
  ! BITWISERS       [ shift and go to state 75 ]


state 107

    (56) expr -> expr BITWISEAND expr .
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . MUL expr
    (53) expr -> expr . DIV expr
    (54) expr -> expr . MOD expr
    (55) expr -> expr . POWER expr
    (56) expr -> expr . BITWISEAND expr
    (57) expr -> expr . BITWISEOR expr
    (58) expr -> expr . BITWISEXOR expr
    (59) expr -> expr . BITWISELS INT
    (60) expr -> expr . BITWISERS INT

    PLUS            reduce using rule 56 (expr -> expr BITWISEAND expr .)
    MINUS           reduce using rule 56 (expr -> expr BITWISEAND expr .)
    MUL             reduce using rule 56 (expr -> expr BITWISEAND expr .)
    DIV             reduce using rule 56 (expr -> expr BITWISEAND expr .)
    MOD             reduce using rule 56 (expr -> expr BITWISEAND expr .)
    BITWISEAND      reduce using rule 56 (expr -> expr BITWISEAND expr .)
    BITWISEOR       reduce using rule 56 (expr -> expr BITWISEAND expr .)
    BITWISEXOR      reduce using rule 56 (expr -> expr BITWISEAND expr .)
    BITWISELS       reduce using rule 56 (expr -> expr BITWISEAND expr .)
    BITWISERS       reduce using rule 56 (expr -> expr BITWISEAND expr .)
    LT              reduce using rule 56 (expr -> expr BITWISEAND expr .)
    LTE             reduce using rule 56 (expr -> expr BITWISEAND expr .)
    GT              reduce using rule 56 (expr -> expr BITWISEAND expr .)
    GTE             reduce using rule 56 (expr -> expr BITWISEAND expr .)
    EQUAL           reduce using rule 56 (expr -> expr BITWISEAND expr .)
    NOTEQUAL        reduce using rule 56 (expr -> expr BITWISEAND expr .)
    STEPIN          reduce using rule 56 (expr -> expr BITWISEAND expr .)
    NEWLINE         reduce using rule 56 (expr -> expr BITWISEAND expr .)
    RETASSIGN       reduce using rule 56 (expr -> expr BITWISEAND expr .)
    SEP             reduce using rule 56 (expr -> expr BITWISEAND expr .)
    RPAREN          reduce using rule 56 (expr -> expr BITWISEAND expr .)
    TO              reduce using rule 56 (expr -> expr BITWISEAND expr .)
    AND             reduce using rule 56 (expr -> expr BITWISEAND expr .)
    OR              reduce using rule 56 (expr -> expr BITWISEAND expr .)
    STEP            reduce using rule 56 (expr -> expr BITWISEAND expr .)
    POWER           shift and go to state 70

  ! POWER           [ reduce using rule 56 (expr -> expr BITWISEAND expr .) ]
  ! PLUS            [ shift and go to state 65 ]
  ! MINUS           [ shift and go to state 66 ]
  ! MUL             [ shift and go to state 67 ]
  ! DIV             [ shift and go to state 68 ]
  ! MOD             [ shift and go to state 69 ]
  ! BITWISEAND      [ shift and go to state 71 ]
  ! BITWISEOR       [ shift and go to state 72 ]
  ! BITWISEXOR      [ shift and go to state 73 ]
  ! BITWISELS       [ shift and go to state 74 ]
  ! BITWISERS       [ shift and go to state 75 ]


state 108

    (57) expr -> expr BITWISEOR expr .
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . MUL expr
    (53) expr -> expr . DIV expr
    (54) expr -> expr . MOD expr
    (55) expr -> expr . POWER expr
    (56) expr -> expr . BITWISEAND expr
    (57) expr -> expr . BITWISEOR expr
    (58) expr -> expr . BITWISEXOR expr
    (59) expr -> expr . BITWISELS INT
    (60) expr -> expr . BITWISERS INT

    PLUS            reduce using rule 57 (expr -> expr BITWISEOR expr .)
    MINUS           reduce using rule 57 (expr -> expr BITWISEOR expr .)
    MUL             reduce using rule 57 (expr -> expr BITWISEOR expr .)
    DIV             reduce using rule 57 (expr -> expr BITWISEOR expr .)
    MOD             reduce using rule 57 (expr -> expr BITWISEOR expr .)
    BITWISEAND      reduce using rule 57 (expr -> expr BITWISEOR expr .)
    BITWISEOR       reduce using rule 57 (expr -> expr BITWISEOR expr .)
    BITWISEXOR      reduce using rule 57 (expr -> expr BITWISEOR expr .)
    BITWISELS       reduce using rule 57 (expr -> expr BITWISEOR expr .)
    BITWISERS       reduce using rule 57 (expr -> expr BITWISEOR expr .)
    LT              reduce using rule 57 (expr -> expr BITWISEOR expr .)
    LTE             reduce using rule 57 (expr -> expr BITWISEOR expr .)
    GT              reduce using rule 57 (expr -> expr BITWISEOR expr .)
    GTE             reduce using rule 57 (expr -> expr BITWISEOR expr .)
    EQUAL           reduce using rule 57 (expr -> expr BITWISEOR expr .)
    NOTEQUAL        reduce using rule 57 (expr -> expr BITWISEOR expr .)
    STEPIN          reduce using rule 57 (expr -> expr BITWISEOR expr .)
    NEWLINE         reduce using rule 57 (expr -> expr BITWISEOR expr .)
    RETASSIGN       reduce using rule 57 (expr -> expr BITWISEOR expr .)
    SEP             reduce using rule 57 (expr -> expr BITWISEOR expr .)
    RPAREN          reduce using rule 57 (expr -> expr BITWISEOR expr .)
    TO              reduce using rule 57 (expr -> expr BITWISEOR expr .)
    AND             reduce using rule 57 (expr -> expr BITWISEOR expr .)
    OR              reduce using rule 57 (expr -> expr BITWISEOR expr .)
    STEP            reduce using rule 57 (expr -> expr BITWISEOR expr .)
    POWER           shift and go to state 70

  ! POWER           [ reduce using rule 57 (expr -> expr BITWISEOR expr .) ]
  ! PLUS            [ shift and go to state 65 ]
  ! MINUS           [ shift and go to state 66 ]
  ! MUL             [ shift and go to state 67 ]
  ! DIV             [ shift and go to state 68 ]
  ! MOD             [ shift and go to state 69 ]
  ! BITWISEAND      [ shift and go to state 71 ]
  ! BITWISEOR       [ shift and go to state 72 ]
  ! BITWISEXOR      [ shift and go to state 73 ]
  ! BITWISELS       [ shift and go to state 74 ]
  ! BITWISERS       [ shift and go to state 75 ]


state 109

    (58) expr -> expr BITWISEXOR expr .
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . MUL expr
    (53) expr -> expr . DIV expr
    (54) expr -> expr . MOD expr
    (55) expr -> expr . POWER expr
    (56) expr -> expr . BITWISEAND expr
    (57) expr -> expr . BITWISEOR expr
    (58) expr -> expr . BITWISEXOR expr
    (59) expr -> expr . BITWISELS INT
    (60) expr -> expr . BITWISERS INT

    PLUS            reduce using rule 58 (expr -> expr BITWISEXOR expr .)
    MINUS           reduce using rule 58 (expr -> expr BITWISEXOR expr .)
    MUL             reduce using rule 58 (expr -> expr BITWISEXOR expr .)
    DIV             reduce using rule 58 (expr -> expr BITWISEXOR expr .)
    MOD             reduce using rule 58 (expr -> expr BITWISEXOR expr .)
    BITWISEAND      reduce using rule 58 (expr -> expr BITWISEXOR expr .)
    BITWISEOR       reduce using rule 58 (expr -> expr BITWISEXOR expr .)
    BITWISEXOR      reduce using rule 58 (expr -> expr BITWISEXOR expr .)
    BITWISELS       reduce using rule 58 (expr -> expr BITWISEXOR expr .)
    BITWISERS       reduce using rule 58 (expr -> expr BITWISEXOR expr .)
    LT              reduce using rule 58 (expr -> expr BITWISEXOR expr .)
    LTE             reduce using rule 58 (expr -> expr BITWISEXOR expr .)
    GT              reduce using rule 58 (expr -> expr BITWISEXOR expr .)
    GTE             reduce using rule 58 (expr -> expr BITWISEXOR expr .)
    EQUAL           reduce using rule 58 (expr -> expr BITWISEXOR expr .)
    NOTEQUAL        reduce using rule 58 (expr -> expr BITWISEXOR expr .)
    STEPIN          reduce using rule 58 (expr -> expr BITWISEXOR expr .)
    NEWLINE         reduce using rule 58 (expr -> expr BITWISEXOR expr .)
    RETASSIGN       reduce using rule 58 (expr -> expr BITWISEXOR expr .)
    SEP             reduce using rule 58 (expr -> expr BITWISEXOR expr .)
    RPAREN          reduce using rule 58 (expr -> expr BITWISEXOR expr .)
    TO              reduce using rule 58 (expr -> expr BITWISEXOR expr .)
    AND             reduce using rule 58 (expr -> expr BITWISEXOR expr .)
    OR              reduce using rule 58 (expr -> expr BITWISEXOR expr .)
    STEP            reduce using rule 58 (expr -> expr BITWISEXOR expr .)
    POWER           shift and go to state 70

  ! POWER           [ reduce using rule 58 (expr -> expr BITWISEXOR expr .) ]
  ! PLUS            [ shift and go to state 65 ]
  ! MINUS           [ shift and go to state 66 ]
  ! MUL             [ shift and go to state 67 ]
  ! DIV             [ shift and go to state 68 ]
  ! MOD             [ shift and go to state 69 ]
  ! BITWISEAND      [ shift and go to state 71 ]
  ! BITWISEOR       [ shift and go to state 72 ]
  ! BITWISEXOR      [ shift and go to state 73 ]
  ! BITWISELS       [ shift and go to state 74 ]
  ! BITWISERS       [ shift and go to state 75 ]


state 110

    (59) expr -> expr BITWISELS INT .

    PLUS            reduce using rule 59 (expr -> expr BITWISELS INT .)
    MINUS           reduce using rule 59 (expr -> expr BITWISELS INT .)
    MUL             reduce using rule 59 (expr -> expr BITWISELS INT .)
    DIV             reduce using rule 59 (expr -> expr BITWISELS INT .)
    MOD             reduce using rule 59 (expr -> expr BITWISELS INT .)
    POWER           reduce using rule 59 (expr -> expr BITWISELS INT .)
    BITWISEAND      reduce using rule 59 (expr -> expr BITWISELS INT .)
    BITWISEOR       reduce using rule 59 (expr -> expr BITWISELS INT .)
    BITWISEXOR      reduce using rule 59 (expr -> expr BITWISELS INT .)
    BITWISELS       reduce using rule 59 (expr -> expr BITWISELS INT .)
    BITWISERS       reduce using rule 59 (expr -> expr BITWISELS INT .)
    LT              reduce using rule 59 (expr -> expr BITWISELS INT .)
    LTE             reduce using rule 59 (expr -> expr BITWISELS INT .)
    GT              reduce using rule 59 (expr -> expr BITWISELS INT .)
    GTE             reduce using rule 59 (expr -> expr BITWISELS INT .)
    EQUAL           reduce using rule 59 (expr -> expr BITWISELS INT .)
    NOTEQUAL        reduce using rule 59 (expr -> expr BITWISELS INT .)
    STEPIN          reduce using rule 59 (expr -> expr BITWISELS INT .)
    NEWLINE         reduce using rule 59 (expr -> expr BITWISELS INT .)
    RETASSIGN       reduce using rule 59 (expr -> expr BITWISELS INT .)
    SEP             reduce using rule 59 (expr -> expr BITWISELS INT .)
    RPAREN          reduce using rule 59 (expr -> expr BITWISELS INT .)
    TO              reduce using rule 59 (expr -> expr BITWISELS INT .)
    AND             reduce using rule 59 (expr -> expr BITWISELS INT .)
    OR              reduce using rule 59 (expr -> expr BITWISELS INT .)
    STEP            reduce using rule 59 (expr -> expr BITWISELS INT .)


state 111

    (60) expr -> expr BITWISERS INT .

    PLUS            reduce using rule 60 (expr -> expr BITWISERS INT .)
    MINUS           reduce using rule 60 (expr -> expr BITWISERS INT .)
    MUL             reduce using rule 60 (expr -> expr BITWISERS INT .)
    DIV             reduce using rule 60 (expr -> expr BITWISERS INT .)
    MOD             reduce using rule 60 (expr -> expr BITWISERS INT .)
    POWER           reduce using rule 60 (expr -> expr BITWISERS INT .)
    BITWISEAND      reduce using rule 60 (expr -> expr BITWISERS INT .)
    BITWISEOR       reduce using rule 60 (expr -> expr BITWISERS INT .)
    BITWISEXOR      reduce using rule 60 (expr -> expr BITWISERS INT .)
    BITWISELS       reduce using rule 60 (expr -> expr BITWISERS INT .)
    BITWISERS       reduce using rule 60 (expr -> expr BITWISERS INT .)
    LT              reduce using rule 60 (expr -> expr BITWISERS INT .)
    LTE             reduce using rule 60 (expr -> expr BITWISERS INT .)
    GT              reduce using rule 60 (expr -> expr BITWISERS INT .)
    GTE             reduce using rule 60 (expr -> expr BITWISERS INT .)
    EQUAL           reduce using rule 60 (expr -> expr BITWISERS INT .)
    NOTEQUAL        reduce using rule 60 (expr -> expr BITWISERS INT .)
    STEPIN          reduce using rule 60 (expr -> expr BITWISERS INT .)
    NEWLINE         reduce using rule 60 (expr -> expr BITWISERS INT .)
    RETASSIGN       reduce using rule 60 (expr -> expr BITWISERS INT .)
    SEP             reduce using rule 60 (expr -> expr BITWISERS INT .)
    RPAREN          reduce using rule 60 (expr -> expr BITWISERS INT .)
    TO              reduce using rule 60 (expr -> expr BITWISERS INT .)
    AND             reduce using rule 60 (expr -> expr BITWISERS INT .)
    OR              reduce using rule 60 (expr -> expr BITWISERS INT .)
    STEP            reduce using rule 60 (expr -> expr BITWISERS INT .)


state 112

    (44) relexpr -> expr LT expr .
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . MUL expr
    (53) expr -> expr . DIV expr
    (54) expr -> expr . MOD expr
    (55) expr -> expr . POWER expr
    (56) expr -> expr . BITWISEAND expr
    (57) expr -> expr . BITWISEOR expr
    (58) expr -> expr . BITWISEXOR expr
    (59) expr -> expr . BITWISELS INT
    (60) expr -> expr . BITWISERS INT

    AND             reduce using rule 44 (relexpr -> expr LT expr .)
    OR              reduce using rule 44 (relexpr -> expr LT expr .)
    STEPIN          reduce using rule 44 (relexpr -> expr LT expr .)
    NEWLINE         reduce using rule 44 (relexpr -> expr LT expr .)
    RETASSIGN       reduce using rule 44 (relexpr -> expr LT expr .)
    SEP             reduce using rule 44 (relexpr -> expr LT expr .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    MUL             shift and go to state 67
    DIV             shift and go to state 68
    MOD             shift and go to state 69
    POWER           shift and go to state 70
    BITWISEAND      shift and go to state 71
    BITWISEOR       shift and go to state 72
    BITWISEXOR      shift and go to state 73
    BITWISELS       shift and go to state 74
    BITWISERS       shift and go to state 75


state 113

    (45) relexpr -> expr LTE expr .
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . MUL expr
    (53) expr -> expr . DIV expr
    (54) expr -> expr . MOD expr
    (55) expr -> expr . POWER expr
    (56) expr -> expr . BITWISEAND expr
    (57) expr -> expr . BITWISEOR expr
    (58) expr -> expr . BITWISEXOR expr
    (59) expr -> expr . BITWISELS INT
    (60) expr -> expr . BITWISERS INT

    AND             reduce using rule 45 (relexpr -> expr LTE expr .)
    OR              reduce using rule 45 (relexpr -> expr LTE expr .)
    STEPIN          reduce using rule 45 (relexpr -> expr LTE expr .)
    NEWLINE         reduce using rule 45 (relexpr -> expr LTE expr .)
    RETASSIGN       reduce using rule 45 (relexpr -> expr LTE expr .)
    SEP             reduce using rule 45 (relexpr -> expr LTE expr .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    MUL             shift and go to state 67
    DIV             shift and go to state 68
    MOD             shift and go to state 69
    POWER           shift and go to state 70
    BITWISEAND      shift and go to state 71
    BITWISEOR       shift and go to state 72
    BITWISEXOR      shift and go to state 73
    BITWISELS       shift and go to state 74
    BITWISERS       shift and go to state 75


state 114

    (46) relexpr -> expr GT expr .
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . MUL expr
    (53) expr -> expr . DIV expr
    (54) expr -> expr . MOD expr
    (55) expr -> expr . POWER expr
    (56) expr -> expr . BITWISEAND expr
    (57) expr -> expr . BITWISEOR expr
    (58) expr -> expr . BITWISEXOR expr
    (59) expr -> expr . BITWISELS INT
    (60) expr -> expr . BITWISERS INT

    AND             reduce using rule 46 (relexpr -> expr GT expr .)
    OR              reduce using rule 46 (relexpr -> expr GT expr .)
    STEPIN          reduce using rule 46 (relexpr -> expr GT expr .)
    NEWLINE         reduce using rule 46 (relexpr -> expr GT expr .)
    RETASSIGN       reduce using rule 46 (relexpr -> expr GT expr .)
    SEP             reduce using rule 46 (relexpr -> expr GT expr .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    MUL             shift and go to state 67
    DIV             shift and go to state 68
    MOD             shift and go to state 69
    POWER           shift and go to state 70
    BITWISEAND      shift and go to state 71
    BITWISEOR       shift and go to state 72
    BITWISEXOR      shift and go to state 73
    BITWISELS       shift and go to state 74
    BITWISERS       shift and go to state 75


state 115

    (47) relexpr -> expr GTE expr .
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . MUL expr
    (53) expr -> expr . DIV expr
    (54) expr -> expr . MOD expr
    (55) expr -> expr . POWER expr
    (56) expr -> expr . BITWISEAND expr
    (57) expr -> expr . BITWISEOR expr
    (58) expr -> expr . BITWISEXOR expr
    (59) expr -> expr . BITWISELS INT
    (60) expr -> expr . BITWISERS INT

    AND             reduce using rule 47 (relexpr -> expr GTE expr .)
    OR              reduce using rule 47 (relexpr -> expr GTE expr .)
    STEPIN          reduce using rule 47 (relexpr -> expr GTE expr .)
    NEWLINE         reduce using rule 47 (relexpr -> expr GTE expr .)
    RETASSIGN       reduce using rule 47 (relexpr -> expr GTE expr .)
    SEP             reduce using rule 47 (relexpr -> expr GTE expr .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    MUL             shift and go to state 67
    DIV             shift and go to state 68
    MOD             shift and go to state 69
    POWER           shift and go to state 70
    BITWISEAND      shift and go to state 71
    BITWISEOR       shift and go to state 72
    BITWISEXOR      shift and go to state 73
    BITWISELS       shift and go to state 74
    BITWISERS       shift and go to state 75


state 116

    (48) relexpr -> expr EQUAL expr .
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . MUL expr
    (53) expr -> expr . DIV expr
    (54) expr -> expr . MOD expr
    (55) expr -> expr . POWER expr
    (56) expr -> expr . BITWISEAND expr
    (57) expr -> expr . BITWISEOR expr
    (58) expr -> expr . BITWISEXOR expr
    (59) expr -> expr . BITWISELS INT
    (60) expr -> expr . BITWISERS INT

    AND             reduce using rule 48 (relexpr -> expr EQUAL expr .)
    OR              reduce using rule 48 (relexpr -> expr EQUAL expr .)
    STEPIN          reduce using rule 48 (relexpr -> expr EQUAL expr .)
    NEWLINE         reduce using rule 48 (relexpr -> expr EQUAL expr .)
    RETASSIGN       reduce using rule 48 (relexpr -> expr EQUAL expr .)
    SEP             reduce using rule 48 (relexpr -> expr EQUAL expr .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    MUL             shift and go to state 67
    DIV             shift and go to state 68
    MOD             shift and go to state 69
    POWER           shift and go to state 70
    BITWISEAND      shift and go to state 71
    BITWISEOR       shift and go to state 72
    BITWISEXOR      shift and go to state 73
    BITWISELS       shift and go to state 74
    BITWISERS       shift and go to state 75


state 117

    (49) relexpr -> expr NOTEQUAL expr .
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . MUL expr
    (53) expr -> expr . DIV expr
    (54) expr -> expr . MOD expr
    (55) expr -> expr . POWER expr
    (56) expr -> expr . BITWISEAND expr
    (57) expr -> expr . BITWISEOR expr
    (58) expr -> expr . BITWISEXOR expr
    (59) expr -> expr . BITWISELS INT
    (60) expr -> expr . BITWISERS INT

    AND             reduce using rule 49 (relexpr -> expr NOTEQUAL expr .)
    OR              reduce using rule 49 (relexpr -> expr NOTEQUAL expr .)
    STEPIN          reduce using rule 49 (relexpr -> expr NOTEQUAL expr .)
    NEWLINE         reduce using rule 49 (relexpr -> expr NOTEQUAL expr .)
    RETASSIGN       reduce using rule 49 (relexpr -> expr NOTEQUAL expr .)
    SEP             reduce using rule 49 (relexpr -> expr NOTEQUAL expr .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    MUL             shift and go to state 67
    DIV             shift and go to state 68
    MOD             shift and go to state 69
    POWER           shift and go to state 70
    BITWISEAND      shift and go to state 71
    BITWISEOR       shift and go to state 72
    BITWISEXOR      shift and go to state 73
    BITWISELS       shift and go to state 74
    BITWISERS       shift and go to state 75


state 118

    (67) expr -> LPAREN expr RPAREN .

    PLUS            reduce using rule 67 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 67 (expr -> LPAREN expr RPAREN .)
    MUL             reduce using rule 67 (expr -> LPAREN expr RPAREN .)
    DIV             reduce using rule 67 (expr -> LPAREN expr RPAREN .)
    MOD             reduce using rule 67 (expr -> LPAREN expr RPAREN .)
    POWER           reduce using rule 67 (expr -> LPAREN expr RPAREN .)
    BITWISEAND      reduce using rule 67 (expr -> LPAREN expr RPAREN .)
    BITWISEOR       reduce using rule 67 (expr -> LPAREN expr RPAREN .)
    BITWISEXOR      reduce using rule 67 (expr -> LPAREN expr RPAREN .)
    BITWISELS       reduce using rule 67 (expr -> LPAREN expr RPAREN .)
    BITWISERS       reduce using rule 67 (expr -> LPAREN expr RPAREN .)
    LT              reduce using rule 67 (expr -> LPAREN expr RPAREN .)
    LTE             reduce using rule 67 (expr -> LPAREN expr RPAREN .)
    GT              reduce using rule 67 (expr -> LPAREN expr RPAREN .)
    GTE             reduce using rule 67 (expr -> LPAREN expr RPAREN .)
    EQUAL           reduce using rule 67 (expr -> LPAREN expr RPAREN .)
    NOTEQUAL        reduce using rule 67 (expr -> LPAREN expr RPAREN .)
    STEPIN          reduce using rule 67 (expr -> LPAREN expr RPAREN .)
    NEWLINE         reduce using rule 67 (expr -> LPAREN expr RPAREN .)
    RETASSIGN       reduce using rule 67 (expr -> LPAREN expr RPAREN .)
    SEP             reduce using rule 67 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 67 (expr -> LPAREN expr RPAREN .)
    TO              reduce using rule 67 (expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 67 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 67 (expr -> LPAREN expr RPAREN .)
    STEP            reduce using rule 67 (expr -> LPAREN expr RPAREN .)


state 119

    (14) command -> optlvldec ELSE IF boolexpr . optlvlinc
    (41) boolexpr -> boolexpr . AND boolexpr
    (42) boolexpr -> boolexpr . OR boolexpr
    (36) optlvlinc -> . STEPIN
    (37) optlvlinc -> . empty
    (75) empty -> .

    AND             shift and go to state 60
    OR              shift and go to state 61
    STEPIN          shift and go to state 62
    NEWLINE         reduce using rule 75 (empty -> .)

    optlvlinc                      shift and go to state 125
    empty                          shift and go to state 63

state 120

    (15) command -> optlvldec ELSE IF error . optlvlinc
    (36) optlvlinc -> . STEPIN
    (37) optlvlinc -> . empty
    (75) empty -> .

    STEPIN          shift and go to state 62
    NEWLINE         reduce using rule 75 (empty -> .)

    optlvlinc                      shift and go to state 126
    empty                          shift and go to state 63

state 121

    (25) command -> CMD paramlist RETASSIGN ID .

    NEWLINE         reduce using rule 25 (command -> CMD paramlist RETASSIGN ID .)


state 122

    (71) paramlist -> paramlist SEP param .

    RETASSIGN       reduce using rule 71 (paramlist -> paramlist SEP param .)
    SEP             reduce using rule 71 (paramlist -> paramlist SEP param .)
    NEWLINE         reduce using rule 71 (paramlist -> paramlist SEP param .)


state 123

    (7) command -> FOR ID ASSIGN expr TO . expr optstep optlvlinc
    (9) command -> FOR ID ASSIGN expr TO . error optstep optlvlinc
    (10) command -> FOR ID ASSIGN expr TO . expr STEP error
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr MUL expr
    (53) expr -> . expr DIV expr
    (54) expr -> . expr MOD expr
    (55) expr -> . expr POWER expr
    (56) expr -> . expr BITWISEAND expr
    (57) expr -> . expr BITWISEOR expr
    (58) expr -> . expr BITWISEXOR expr
    (59) expr -> . expr BITWISELS INT
    (60) expr -> . expr BITWISERS INT
    (61) expr -> . BITWISENOT expr
    (62) expr -> . INT
    (63) expr -> . FLOAT
    (64) expr -> . STR
    (65) expr -> . ID
    (66) expr -> . bool
    (67) expr -> . LPAREN expr RPAREN
    (68) expr -> . MINUS expr
    (69) bool -> . TRUE
    (70) bool -> . FALSE

    error           shift and go to state 128
    BITWISENOT      shift and go to state 32
    INT             shift and go to state 31
    FLOAT           shift and go to state 33
    STR             shift and go to state 34
    ID              shift and go to state 35
    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expr                           shift and go to state 127
    bool                           shift and go to state 36

state 124

    (8) command -> FOR ID ASSIGN error TO . expr optstep optlvlinc
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr MUL expr
    (53) expr -> . expr DIV expr
    (54) expr -> . expr MOD expr
    (55) expr -> . expr POWER expr
    (56) expr -> . expr BITWISEAND expr
    (57) expr -> . expr BITWISEOR expr
    (58) expr -> . expr BITWISEXOR expr
    (59) expr -> . expr BITWISELS INT
    (60) expr -> . expr BITWISERS INT
    (61) expr -> . BITWISENOT expr
    (62) expr -> . INT
    (63) expr -> . FLOAT
    (64) expr -> . STR
    (65) expr -> . ID
    (66) expr -> . bool
    (67) expr -> . LPAREN expr RPAREN
    (68) expr -> . MINUS expr
    (69) bool -> . TRUE
    (70) bool -> . FALSE

    BITWISENOT      shift and go to state 32
    INT             shift and go to state 31
    FLOAT           shift and go to state 33
    STR             shift and go to state 34
    ID              shift and go to state 35
    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expr                           shift and go to state 129
    bool                           shift and go to state 36

state 125

    (14) command -> optlvldec ELSE IF boolexpr optlvlinc .

    NEWLINE         reduce using rule 14 (command -> optlvldec ELSE IF boolexpr optlvlinc .)


state 126

    (15) command -> optlvldec ELSE IF error optlvlinc .

    NEWLINE         reduce using rule 15 (command -> optlvldec ELSE IF error optlvlinc .)


state 127

    (7) command -> FOR ID ASSIGN expr TO expr . optstep optlvlinc
    (10) command -> FOR ID ASSIGN expr TO expr . STEP error
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . MUL expr
    (53) expr -> expr . DIV expr
    (54) expr -> expr . MOD expr
    (55) expr -> expr . POWER expr
    (56) expr -> expr . BITWISEAND expr
    (57) expr -> expr . BITWISEOR expr
    (58) expr -> expr . BITWISEXOR expr
    (59) expr -> expr . BITWISELS INT
    (60) expr -> expr . BITWISERS INT
    (34) optstep -> . STEP expr
    (35) optstep -> . empty
    (75) empty -> .

    STEP            shift and go to state 131
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    MUL             shift and go to state 67
    DIV             shift and go to state 68
    MOD             shift and go to state 69
    POWER           shift and go to state 70
    BITWISEAND      shift and go to state 71
    BITWISEOR       shift and go to state 72
    BITWISEXOR      shift and go to state 73
    BITWISELS       shift and go to state 74
    BITWISERS       shift and go to state 75
    STEPIN          reduce using rule 75 (empty -> .)
    NEWLINE         reduce using rule 75 (empty -> .)

    optstep                        shift and go to state 130
    empty                          shift and go to state 132

state 128

    (9) command -> FOR ID ASSIGN expr TO error . optstep optlvlinc
    (34) optstep -> . STEP expr
    (35) optstep -> . empty
    (75) empty -> .

    STEP            shift and go to state 134
    STEPIN          reduce using rule 75 (empty -> .)
    NEWLINE         reduce using rule 75 (empty -> .)

    optstep                        shift and go to state 133
    empty                          shift and go to state 132

state 129

    (8) command -> FOR ID ASSIGN error TO expr . optstep optlvlinc
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . MUL expr
    (53) expr -> expr . DIV expr
    (54) expr -> expr . MOD expr
    (55) expr -> expr . POWER expr
    (56) expr -> expr . BITWISEAND expr
    (57) expr -> expr . BITWISEOR expr
    (58) expr -> expr . BITWISEXOR expr
    (59) expr -> expr . BITWISELS INT
    (60) expr -> expr . BITWISERS INT
    (34) optstep -> . STEP expr
    (35) optstep -> . empty
    (75) empty -> .

    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    MUL             shift and go to state 67
    DIV             shift and go to state 68
    MOD             shift and go to state 69
    POWER           shift and go to state 70
    BITWISEAND      shift and go to state 71
    BITWISEOR       shift and go to state 72
    BITWISEXOR      shift and go to state 73
    BITWISELS       shift and go to state 74
    BITWISERS       shift and go to state 75
    STEP            shift and go to state 134
    STEPIN          reduce using rule 75 (empty -> .)
    NEWLINE         reduce using rule 75 (empty -> .)

    optstep                        shift and go to state 135
    empty                          shift and go to state 132

state 130

    (7) command -> FOR ID ASSIGN expr TO expr optstep . optlvlinc
    (36) optlvlinc -> . STEPIN
    (37) optlvlinc -> . empty
    (75) empty -> .

    STEPIN          shift and go to state 62
    NEWLINE         reduce using rule 75 (empty -> .)

    optlvlinc                      shift and go to state 136
    empty                          shift and go to state 63

state 131

    (10) command -> FOR ID ASSIGN expr TO expr STEP . error
    (34) optstep -> STEP . expr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr MUL expr
    (53) expr -> . expr DIV expr
    (54) expr -> . expr MOD expr
    (55) expr -> . expr POWER expr
    (56) expr -> . expr BITWISEAND expr
    (57) expr -> . expr BITWISEOR expr
    (58) expr -> . expr BITWISEXOR expr
    (59) expr -> . expr BITWISELS INT
    (60) expr -> . expr BITWISERS INT
    (61) expr -> . BITWISENOT expr
    (62) expr -> . INT
    (63) expr -> . FLOAT
    (64) expr -> . STR
    (65) expr -> . ID
    (66) expr -> . bool
    (67) expr -> . LPAREN expr RPAREN
    (68) expr -> . MINUS expr
    (69) bool -> . TRUE
    (70) bool -> . FALSE

    error           shift and go to state 138
    BITWISENOT      shift and go to state 32
    INT             shift and go to state 31
    FLOAT           shift and go to state 33
    STR             shift and go to state 34
    ID              shift and go to state 35
    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expr                           shift and go to state 137
    bool                           shift and go to state 36

state 132

    (35) optstep -> empty .

    STEPIN          reduce using rule 35 (optstep -> empty .)
    NEWLINE         reduce using rule 35 (optstep -> empty .)


state 133

    (9) command -> FOR ID ASSIGN expr TO error optstep . optlvlinc
    (36) optlvlinc -> . STEPIN
    (37) optlvlinc -> . empty
    (75) empty -> .

    STEPIN          shift and go to state 62
    NEWLINE         reduce using rule 75 (empty -> .)

    optlvlinc                      shift and go to state 139
    empty                          shift and go to state 63

state 134

    (34) optstep -> STEP . expr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr MUL expr
    (53) expr -> . expr DIV expr
    (54) expr -> . expr MOD expr
    (55) expr -> . expr POWER expr
    (56) expr -> . expr BITWISEAND expr
    (57) expr -> . expr BITWISEOR expr
    (58) expr -> . expr BITWISEXOR expr
    (59) expr -> . expr BITWISELS INT
    (60) expr -> . expr BITWISERS INT
    (61) expr -> . BITWISENOT expr
    (62) expr -> . INT
    (63) expr -> . FLOAT
    (64) expr -> . STR
    (65) expr -> . ID
    (66) expr -> . bool
    (67) expr -> . LPAREN expr RPAREN
    (68) expr -> . MINUS expr
    (69) bool -> . TRUE
    (70) bool -> . FALSE

    BITWISENOT      shift and go to state 32
    INT             shift and go to state 31
    FLOAT           shift and go to state 33
    STR             shift and go to state 34
    ID              shift and go to state 35
    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expr                           shift and go to state 137
    bool                           shift and go to state 36

state 135

    (8) command -> FOR ID ASSIGN error TO expr optstep . optlvlinc
    (36) optlvlinc -> . STEPIN
    (37) optlvlinc -> . empty
    (75) empty -> .

    STEPIN          shift and go to state 62
    NEWLINE         reduce using rule 75 (empty -> .)

    optlvlinc                      shift and go to state 140
    empty                          shift and go to state 63

state 136

    (7) command -> FOR ID ASSIGN expr TO expr optstep optlvlinc .

    NEWLINE         reduce using rule 7 (command -> FOR ID ASSIGN expr TO expr optstep optlvlinc .)


state 137

    (34) optstep -> STEP expr .
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . MUL expr
    (53) expr -> expr . DIV expr
    (54) expr -> expr . MOD expr
    (55) expr -> expr . POWER expr
    (56) expr -> expr . BITWISEAND expr
    (57) expr -> expr . BITWISEOR expr
    (58) expr -> expr . BITWISEXOR expr
    (59) expr -> expr . BITWISELS INT
    (60) expr -> expr . BITWISERS INT

    STEPIN          reduce using rule 34 (optstep -> STEP expr .)
    NEWLINE         reduce using rule 34 (optstep -> STEP expr .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    MUL             shift and go to state 67
    DIV             shift and go to state 68
    MOD             shift and go to state 69
    POWER           shift and go to state 70
    BITWISEAND      shift and go to state 71
    BITWISEOR       shift and go to state 72
    BITWISEXOR      shift and go to state 73
    BITWISELS       shift and go to state 74
    BITWISERS       shift and go to state 75


state 138

    (10) command -> FOR ID ASSIGN expr TO expr STEP error .

    NEWLINE         reduce using rule 10 (command -> FOR ID ASSIGN expr TO expr STEP error .)


state 139

    (9) command -> FOR ID ASSIGN expr TO error optstep optlvlinc .

    NEWLINE         reduce using rule 9 (command -> FOR ID ASSIGN expr TO error optstep optlvlinc .)


state 140

    (8) command -> FOR ID ASSIGN error TO expr optstep optlvlinc .

    NEWLINE         reduce using rule 8 (command -> FOR ID ASSIGN error TO expr optstep optlvlinc .)

